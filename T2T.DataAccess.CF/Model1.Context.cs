//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;

namespace T2T.Model
{
    public partial class T2TDb : DbContext
    {
        public T2TDb()
            : base("name=T2TDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //throw new UnintentionalCodeFirstException();
            modelBuilder.Entity<ResourceDefinition>().Property(rd => rd.Name).IsRequired();
        }
    
        public DbSet<BillOfResource> BillOfResources { get; set; }
        public DbSet<Calendar> Calendars { get; set; }
        public DbSet<Constant> Constants { get; set; }
        public DbSet<Culture> Cultures { get; set; }
        public DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<HandlingUnit> HandlingUnits { get; set; }
        public DbSet<Parametar> Parametars { get; set; }
        public DbSet<ParametarActual> ParametarActuals { get; set; }
        public DbSet<ParametarRequirement> ParametarRequirements { get; set; }
        public DbSet<Photo> Photos { get; set; }
        public DbSet<Property> Properties { get; set; }
        public DbSet<QualityReason> QualityReasons { get; set; }
        public DbSet<Reason> Reasons { get; set; }
        public DbSet<Referencial> Referencials { get; set; }
        public DbSet<ResourceActual> ResourceActuals { get; set; }
        public DbSet<ResourceCapability> ResourceCapabilities { get; set; }
        public DbSet<ResourceClass> ResourceClasses { get; set; }
        public DbSet<ResourceDocument> ResourceDocuments { get; set; }
        public DbSet<ResourceInventory> ResourceInventories { get; set; }
        public DbSet<ResourceLevel> ResourceLevels { get; set; }
        public DbSet<ResourceLot> ResourceLots { get; set; }
        public DbSet<ResourceLotStatus> ResourceLotStatuses { get; set; }
        public DbSet<ResourceLotTracking> ResourceLotTrackings { get; set; }
        public DbSet<ResourceProperty> ResourceProperties { get; set; }
        public DbSet<ResourceRequirement> ResourceRequirements { get; set; }
        public DbSet<ResourceRequirementProperty> ResourceRequirementProperties { get; set; }
        public DbSet<ResourceReview> ResourceReviews { get; set; }
        public DbSet<ResourceSpecification> ResourceSpecifications { get; set; }
        public DbSet<ResourceSpecificationProperty> ResourceSpecificationProperties { get; set; }
        public DbSet<ResourceType> ResourceTypes { get; set; }
        public DbSet<Sequence> Sequences { get; set; }
        public DbSet<Shift> Shifts { get; set; }
        public DbSet<TestResult> TestResults { get; set; }
        public DbSet<TestResultProperty> TestResultProperties { get; set; }
        public DbSet<TestSpecification> TestSpecifications { get; set; }
        public DbSet<TestSpecificationProperty> TestSpecificationProperties { get; set; }
        public DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }
        public DbSet<WorkCapability> WorkCapabilities { get; set; }
        public DbSet<WorkDefinition> WorkDefinitions { get; set; }
        public DbSet<WorkPerformance> WorkPerformances { get; set; }
        public DbSet<WorkProcessSegment> WorkProcessSegments { get; set; }
        public DbSet<WorkRequest> WorkRequests { get; set; }
        public DbSet<WorkResponse> WorkResponses { get; set; }
        public DbSet<WorkSchedule> WorkSchedules { get; set; }
        public DbSet<WorkSpecification> WorkSpecifications { get; set; }
        public DbSet<ResourceActualProperty> ResourceActualProperties { get; set; }
        public DbSet<ResourcePhoto> ResourcePhotoes { get; set; }
        public DbSet<ResourceCapabilityProperty> ResourceCapabilityProperties { get; set; }
        public DbSet<ResourceDefinition> ResourceDefinitions { get; set; }
        public DbSet<EquipmentHmiData> EquipmentHmiDatas { get; set; }
        public DbSet<Equipment1> Equipment1 { get; set; }
        public DbSet<SemiFinishedMaterialInventory> SemiFinishedMaterialInventories { get; set; }
        public DbSet<Location> Locations { get; set; }
    
        public virtual int uspIncSFStock(string ik)
        {
            var ikParameter = ik != null ?
                new ObjectParameter("ik", ik) :
                new ObjectParameter("ik", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspIncSFStock", ikParameter);
        }
    
        public virtual int IncSFStock(string ik)
        {
            var ikParameter = ik != null ?
                new ObjectParameter("ik", ik) :
                new ObjectParameter("ik", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncSFStock", ikParameter);
        }
    }
}
