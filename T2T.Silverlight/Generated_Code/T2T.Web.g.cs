//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace T2T
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using T2T.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace T2T.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'BillOfResource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class BillOfResource : Entity
    {
        
        private Nullable<int> _assemblyID;
        
        private int _billOfResourcesID;
        
        private Nullable<int> _borLevel;
        
        private Nullable<int> _componentID;
        
        private Nullable<DateTime> _createdBy;
        
        private Nullable<DateTime> _endDate;
        
        private Nullable<DateTime> _modifyDate;
        
        private Nullable<decimal> _quantity;
        
        private Nullable<DateTime> _startDate;
        
        private string _unitOfMeasure;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAssemblyIDChanging(Nullable<int> value);
        partial void OnAssemblyIDChanged();
        partial void OnBillOfResourcesIDChanging(int value);
        partial void OnBillOfResourcesIDChanged();
        partial void OnBORLevelChanging(Nullable<int> value);
        partial void OnBORLevelChanged();
        partial void OnComponentIDChanging(Nullable<int> value);
        partial void OnComponentIDChanged();
        partial void OnCreatedByChanging(Nullable<DateTime> value);
        partial void OnCreatedByChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnModifyDateChanging(Nullable<DateTime> value);
        partial void OnModifyDateChanged();
        partial void OnQuantityChanging(Nullable<decimal> value);
        partial void OnQuantityChanged();
        partial void OnStartDateChanging(Nullable<DateTime> value);
        partial void OnStartDateChanged();
        partial void OnUnitOfMeasureChanging(string value);
        partial void OnUnitOfMeasureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BillOfResource"/> class.
        /// </summary>
        public BillOfResource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AssemblyID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> AssemblyID
        {
            get
            {
                return this._assemblyID;
            }
            set
            {
                if ((this._assemblyID != value))
                {
                    this.OnAssemblyIDChanging(value);
                    this.RaiseDataMemberChanging("AssemblyID");
                    this.ValidateProperty("AssemblyID", value);
                    this._assemblyID = value;
                    this.RaiseDataMemberChanged("AssemblyID");
                    this.OnAssemblyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillOfResourcesID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BillOfResourcesID
        {
            get
            {
                return this._billOfResourcesID;
            }
            set
            {
                if ((this._billOfResourcesID != value))
                {
                    this.OnBillOfResourcesIDChanging(value);
                    this.ValidateProperty("BillOfResourcesID", value);
                    this._billOfResourcesID = value;
                    this.RaisePropertyChanged("BillOfResourcesID");
                    this.OnBillOfResourcesIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BORLevel' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BORLevel
        {
            get
            {
                return this._borLevel;
            }
            set
            {
                if ((this._borLevel != value))
                {
                    this.OnBORLevelChanging(value);
                    this.RaiseDataMemberChanging("BORLevel");
                    this.ValidateProperty("BORLevel", value);
                    this._borLevel = value;
                    this.RaiseDataMemberChanged("BORLevel");
                    this.OnBORLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ComponentID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ComponentID
        {
            get
            {
                return this._componentID;
            }
            set
            {
                if ((this._componentID != value))
                {
                    this.OnComponentIDChanging(value);
                    this.RaiseDataMemberChanging("ComponentID");
                    this.ValidateProperty("ComponentID", value);
                    this._componentID = value;
                    this.RaiseDataMemberChanged("ComponentID");
                    this.OnComponentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifyDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                if ((this._modifyDate != value))
                {
                    this.OnModifyDateChanging(value);
                    this.RaiseDataMemberChanging("ModifyDate");
                    this.ValidateProperty("ModifyDate", value);
                    this._modifyDate = value;
                    this.RaiseDataMemberChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasure' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string UnitOfMeasure
        {
            get
            {
                return this._unitOfMeasure;
            }
            set
            {
                if ((this._unitOfMeasure != value))
                {
                    this.OnUnitOfMeasureChanging(value);
                    this.RaiseDataMemberChanging("UnitOfMeasure");
                    this.ValidateProperty("UnitOfMeasure", value);
                    this._unitOfMeasure = value;
                    this.RaiseDataMemberChanged("UnitOfMeasure");
                    this.OnUnitOfMeasureChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._billOfResourcesID;
        }
    }
    
    /// <summary>
    /// The 'Carcass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Carcass : Material
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Carcass"/> class.
        /// </summary>
        public Carcass()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Equipment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Equipment : ResourceDefinition
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Equipment"/> class.
        /// </summary>
        public Equipment()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Inerliner' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Inerliner : Material
    {
        
        private Nullable<int> _length;
        
        private Nullable<decimal> _thickness;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLengthChanging(Nullable<int> value);
        partial void OnLengthChanged();
        partial void OnThicknessChanging(Nullable<decimal> value);
        partial void OnThicknessChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Inerliner"/> class.
        /// </summary>
        public Inerliner()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Thickness' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Thickness
        {
            get
            {
                return this._thickness;
            }
            set
            {
                if ((this._thickness != value))
                {
                    this.OnThicknessChanging(value);
                    this.RaiseDataMemberChanging("Thickness");
                    this.ValidateProperty("Thickness", value);
                    this._thickness = value;
                    this.RaiseDataMemberChanged("Thickness");
                    this.OnThicknessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Lank' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Lank : Material
    {
        
        private Nullable<int> _diameter;
        
        private string _lankTT;
        
        private Nullable<int> _perimeter;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiameterChanging(Nullable<int> value);
        partial void OnDiameterChanged();
        partial void OnLankTTChanging(string value);
        partial void OnLankTTChanged();
        partial void OnPerimeterChanging(Nullable<int> value);
        partial void OnPerimeterChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Lank"/> class.
        /// </summary>
        public Lank()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Diameter' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Diameter
        {
            get
            {
                return this._diameter;
            }
            set
            {
                if ((this._diameter != value))
                {
                    this.OnDiameterChanging(value);
                    this.RaiseDataMemberChanging("Diameter");
                    this.ValidateProperty("Diameter", value);
                    this._diameter = value;
                    this.RaiseDataMemberChanged("Diameter");
                    this.OnDiameterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LankTT' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string LankTT
        {
            get
            {
                return this._lankTT;
            }
            set
            {
                if ((this._lankTT != value))
                {
                    this.OnLankTTChanging(value);
                    this.RaiseDataMemberChanging("LankTT");
                    this.ValidateProperty("LankTT", value);
                    this._lankTT = value;
                    this.RaiseDataMemberChanged("LankTT");
                    this.OnLankTTChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Perimeter' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Perimeter
        {
            get
            {
                return this._perimeter;
            }
            set
            {
                if ((this._perimeter != value))
                {
                    this.OnPerimeterChanging(value);
                    this.RaiseDataMemberChanging("Perimeter");
                    this.ValidateProperty("Perimeter", value);
                    this._perimeter = value;
                    this.RaiseDataMemberChanged("Perimeter");
                    this.OnPerimeterChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Material' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public partial class Material : ResourceDefinition
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Material"/> class.
        /// </summary>
        public Material()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Personnel' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Personnel : ResourceDefinition
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Personnel"/> class.
        /// </summary>
        public Personnel()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'PhysicalAsset' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class PhysicalAsset : ResourceDefinition
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PhysicalAsset"/> class.
        /// </summary>
        public PhysicalAsset()
        {
            this.OnCreated();
        }
    }
    
    /// <summary>
    /// The 'Ply' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Ply : Material
    {
        
        private Nullable<decimal> _angle;
        
        private Nullable<int> _lenght;
        
        private Nullable<byte> _number;
        
        private string _symbol;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAngleChanging(Nullable<decimal> value);
        partial void OnAngleChanged();
        partial void OnLenghtChanging(Nullable<int> value);
        partial void OnLenghtChanged();
        partial void OnNumberChanging(Nullable<byte> value);
        partial void OnNumberChanged();
        partial void OnSymbolChanging(string value);
        partial void OnSymbolChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Ply"/> class.
        /// </summary>
        public Ply()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Angle' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Angle
        {
            get
            {
                return this._angle;
            }
            set
            {
                if ((this._angle != value))
                {
                    this.OnAngleChanging(value);
                    this.RaiseDataMemberChanging("Angle");
                    this.ValidateProperty("Angle", value);
                    this._angle = value;
                    this.RaiseDataMemberChanged("Angle");
                    this.OnAngleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Lenght' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Lenght
        {
            get
            {
                return this._lenght;
            }
            set
            {
                if ((this._lenght != value))
                {
                    this.OnLenghtChanging(value);
                    this.RaiseDataMemberChanging("Lenght");
                    this.ValidateProperty("Lenght", value);
                    this._lenght = value;
                    this.RaiseDataMemberChanged("Lenght");
                    this.OnLenghtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Symbol' value.
        /// </summary>
        [DataMember()]
        [StringLength(4)]
        public string Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if ((this._symbol != value))
                {
                    this.OnSymbolChanging(value);
                    this.RaiseDataMemberChanging("Symbol");
                    this.ValidateProperty("Symbol", value);
                    this._symbol = value;
                    this.RaiseDataMemberChanged("Symbol");
                    this.OnSymbolChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Property' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Property : Entity
    {
        
        private string _dataType;
        
        private string _description;
        
        private string _name;
        
        private Nullable<int> _parentPropertyID;
        
        private int _propertyID;
        
        private EntityCollection<ResourceProperty> _resourceProperties;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataTypeChanging(string value);
        partial void OnDataTypeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentPropertyIDChanging(Nullable<int> value);
        partial void OnParentPropertyIDChanged();
        partial void OnPropertyIDChanging(int value);
        partial void OnPropertyIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Property"/> class.
        /// </summary>
        public Property()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataType' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentPropertyID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ParentPropertyID
        {
            get
            {
                return this._parentPropertyID;
            }
            set
            {
                if ((this._parentPropertyID != value))
                {
                    this.OnParentPropertyIDChanging(value);
                    this.RaiseDataMemberChanging("ParentPropertyID");
                    this.ValidateProperty("ParentPropertyID", value);
                    this._parentPropertyID = value;
                    this.RaiseDataMemberChanged("ParentPropertyID");
                    this.OnParentPropertyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PropertyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PropertyID
        {
            get
            {
                return this._propertyID;
            }
            set
            {
                if ((this._propertyID != value))
                {
                    this.OnPropertyIDChanging(value);
                    this.ValidateProperty("PropertyID", value);
                    this._propertyID = value;
                    this.RaisePropertyChanged("PropertyID");
                    this.OnPropertyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceProperty"/> entity instances.
        /// </summary>
        [Association("Property_ResourceProperty", "PropertyID", "PropertyID")]
        [XmlIgnore()]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                if ((this._resourceProperties == null))
                {
                    this._resourceProperties = new EntityCollection<ResourceProperty>(this, "ResourceProperties", this.FilterResourceProperties, this.AttachResourceProperties, this.DetachResourceProperties);
                }
                return this._resourceProperties;
            }
        }
        
        private void AttachResourceProperties(ResourceProperty entity)
        {
            entity.Property = this;
        }
        
        private void DetachResourceProperties(ResourceProperty entity)
        {
            entity.Property = null;
        }
        
        private bool FilterResourceProperties(ResourceProperty entity)
        {
            return (entity.PropertyID == this.PropertyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._propertyID;
        }
    }
    
    /// <summary>
    /// The 'Protector' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class Protector : Material
    {
        
        private Nullable<int> _length;
        
        private string _profileCode;
        
        private Nullable<int> _sirinaRamena;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLengthChanging(Nullable<int> value);
        partial void OnLengthChanged();
        partial void OnProfileCodeChanging(string value);
        partial void OnProfileCodeChanged();
        partial void OnSirinaRamenaChanging(Nullable<int> value);
        partial void OnSirinaRamenaChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Protector"/> class.
        /// </summary>
        public Protector()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ProfileCode
        {
            get
            {
                return this._profileCode;
            }
            set
            {
                if ((this._profileCode != value))
                {
                    this.OnProfileCodeChanging(value);
                    this.RaiseDataMemberChanging("ProfileCode");
                    this.ValidateProperty("ProfileCode", value);
                    this._profileCode = value;
                    this.RaiseDataMemberChanged("ProfileCode");
                    this.OnProfileCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SirinaRamena' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SirinaRamena
        {
            get
            {
                return this._sirinaRamena;
            }
            set
            {
                if ((this._sirinaRamena != value))
                {
                    this.OnSirinaRamenaChanging(value);
                    this.RaiseDataMemberChanging("SirinaRamena");
                    this.ValidateProperty("SirinaRamena", value);
                    this._sirinaRamena = value;
                    this.RaiseDataMemberChanged("SirinaRamena");
                    this.OnSirinaRamenaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ResourceClass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceClass : Entity
    {
        
        private string _description;
        
        private Nullable<int> _levelID;
        
        private string _name;
        
        private EntityRef<ResourceClass> _parentClass;
        
        private Nullable<int> _parentClassID;
        
        private int _resourceClassID;
        
        private EntityCollection<ResourceDefinition> _resourceDefinitions;
        
        private Nullable<int> _resourceLevelID;
        
        private EntityCollection<ResourceProperty> _resourceProperties;
        
        private Nullable<int> _resourceType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLevelIDChanging(Nullable<int> value);
        partial void OnLevelIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentClassIDChanging(Nullable<int> value);
        partial void OnParentClassIDChanged();
        partial void OnResourceClassIDChanging(int value);
        partial void OnResourceClassIDChanged();
        partial void OnResourceLevelIDChanging(Nullable<int> value);
        partial void OnResourceLevelIDChanged();
        partial void OnResourceTypeChanging(Nullable<int> value);
        partial void OnResourceTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClass"/> class.
        /// </summary>
        public ResourceClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LevelID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> LevelID
        {
            get
            {
                return this._levelID;
            }
            set
            {
                if ((this._levelID != value))
                {
                    this.OnLevelIDChanging(value);
                    this.RaiseDataMemberChanging("LevelID");
                    this.ValidateProperty("LevelID", value);
                    this._levelID = value;
                    this.RaiseDataMemberChanged("LevelID");
                    this.OnLevelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceClass"/> entity.
        /// </summary>
        [Association("ResourceClass_ResourceClass", "ParentClassID", "ResourceClassID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceClass ParentClass
        {
            get
            {
                if ((this._parentClass == null))
                {
                    this._parentClass = new EntityRef<ResourceClass>(this, "ParentClass", this.FilterParentClass);
                }
                return this._parentClass.Entity;
            }
            set
            {
                ResourceClass previous = this.ParentClass;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentClass", value);
                    if ((value != null))
                    {
                        this.ParentClassID = value.ResourceClassID;
                    }
                    else
                    {
                        this.ParentClassID = default(Nullable<int>);
                    }
                    this._parentClass.Entity = value;
                    this.RaisePropertyChanged("ParentClass");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentClassID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ParentClassID
        {
            get
            {
                return this._parentClassID;
            }
            set
            {
                if ((this._parentClassID != value))
                {
                    this.OnParentClassIDChanging(value);
                    this.RaiseDataMemberChanging("ParentClassID");
                    this.ValidateProperty("ParentClassID", value);
                    this._parentClassID = value;
                    this.RaiseDataMemberChanged("ParentClassID");
                    this.OnParentClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceClassID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceClassID
        {
            get
            {
                return this._resourceClassID;
            }
            set
            {
                if ((this._resourceClassID != value))
                {
                    this.OnResourceClassIDChanging(value);
                    this.ValidateProperty("ResourceClassID", value);
                    this._resourceClassID = value;
                    this.RaisePropertyChanged("ResourceClassID");
                    this.OnResourceClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceDefinition"/> entity instances.
        /// </summary>
        [Association("ResourceClass_ResourceDefinition", "ResourceClassID", "ResourceClassID")]
        [XmlIgnore()]
        public EntityCollection<ResourceDefinition> ResourceDefinitions
        {
            get
            {
                if ((this._resourceDefinitions == null))
                {
                    this._resourceDefinitions = new EntityCollection<ResourceDefinition>(this, "ResourceDefinitions", this.FilterResourceDefinitions, this.AttachResourceDefinitions, this.DetachResourceDefinitions);
                }
                return this._resourceDefinitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLevelID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ResourceLevelID
        {
            get
            {
                return this._resourceLevelID;
            }
            set
            {
                if ((this._resourceLevelID != value))
                {
                    this.OnResourceLevelIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceLevelID");
                    this.ValidateProperty("ResourceLevelID", value);
                    this._resourceLevelID = value;
                    this.RaiseDataMemberChanged("ResourceLevelID");
                    this.OnResourceLevelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceProperty"/> entity instances.
        /// </summary>
        [Association("ResourceClass_ResourceProperty", "ResourceClassID", "ResourceID")]
        [XmlIgnore()]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                if ((this._resourceProperties == null))
                {
                    this._resourceProperties = new EntityCollection<ResourceProperty>(this, "ResourceProperties", this.FilterResourceProperties, this.AttachResourceProperties, this.DetachResourceProperties);
                }
                return this._resourceProperties;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceType' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ResourceType
        {
            get
            {
                return this._resourceType;
            }
            set
            {
                if ((this._resourceType != value))
                {
                    this.OnResourceTypeChanging(value);
                    this.RaiseDataMemberChanging("ResourceType");
                    this.ValidateProperty("ResourceType", value);
                    this._resourceType = value;
                    this.RaiseDataMemberChanged("ResourceType");
                    this.OnResourceTypeChanged();
                }
            }
        }
        
        private bool FilterParentClass(ResourceClass entity)
        {
            return (entity.ResourceClassID == this.ParentClassID);
        }
        
        private void AttachResourceDefinitions(ResourceDefinition entity)
        {
            entity.ResourceClass = this;
        }
        
        private void DetachResourceDefinitions(ResourceDefinition entity)
        {
            entity.ResourceClass = null;
        }
        
        private bool FilterResourceDefinitions(ResourceDefinition entity)
        {
            return (entity.ResourceClassID == this.ResourceClassID);
        }
        
        private void AttachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceClass = this;
        }
        
        private void DetachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceClass = null;
        }
        
        private bool FilterResourceProperties(ResourceProperty entity)
        {
            return (entity.ResourceID == this.ResourceClassID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceClassID;
        }
    }
    
    /// <summary>
    /// The 'ResourceDefinition' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    [KnownType(typeof(Carcass))]
    [KnownType(typeof(Equipment))]
    [KnownType(typeof(Inerliner))]
    [KnownType(typeof(Lank))]
    [KnownType(typeof(Material))]
    [KnownType(typeof(Personnel))]
    [KnownType(typeof(PhysicalAsset))]
    [KnownType(typeof(Ply))]
    [KnownType(typeof(Protector))]
    [KnownType(typeof(ScooterRawTyre))]
    [KnownType(typeof(ScooterTyre))]
    public abstract partial class ResourceDefinition : Entity
    {
        
        private string _description;
        
        private string _name;
        
        private Nullable<int> _parentResourceDefinitionID;
        
        private EntityRef<ResourceClass> _resourceClass;
        
        private int _resourceClassID;
        
        private int _resourceDefinitionID;
        
        private EntityCollection<ResourceLot> _resourceLots;
        
        private EntityCollection<ResourceProperty> _resourceProperties;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentResourceDefinitionIDChanging(Nullable<int> value);
        partial void OnParentResourceDefinitionIDChanged();
        partial void OnResourceClassIDChanging(int value);
        partial void OnResourceClassIDChanged();
        partial void OnResourceDefinitionIDChanging(int value);
        partial void OnResourceDefinitionIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceDefinition"/> class.
        /// </summary>
        protected ResourceDefinition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentResourceDefinitionID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ParentResourceDefinitionID
        {
            get
            {
                return this._parentResourceDefinitionID;
            }
            set
            {
                if ((this._parentResourceDefinitionID != value))
                {
                    this.OnParentResourceDefinitionIDChanging(value);
                    this.RaiseDataMemberChanging("ParentResourceDefinitionID");
                    this.ValidateProperty("ParentResourceDefinitionID", value);
                    this._parentResourceDefinitionID = value;
                    this.RaiseDataMemberChanged("ParentResourceDefinitionID");
                    this.OnParentResourceDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceClass"/> entity.
        /// </summary>
        [Association("ResourceClass_ResourceDefinition", "ResourceClassID", "ResourceClassID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceClass ResourceClass
        {
            get
            {
                if ((this._resourceClass == null))
                {
                    this._resourceClass = new EntityRef<ResourceClass>(this, "ResourceClass", this.FilterResourceClass);
                }
                return this._resourceClass.Entity;
            }
            set
            {
                ResourceClass previous = this.ResourceClass;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceClass", value);
                    if ((previous != null))
                    {
                        this._resourceClass.Entity = null;
                        previous.ResourceDefinitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceClassID = value.ResourceClassID;
                    }
                    else
                    {
                        this.ResourceClassID = default(int);
                    }
                    this._resourceClass.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceDefinitions.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceClass");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceClassID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ResourceClassID
        {
            get
            {
                return this._resourceClassID;
            }
            set
            {
                if ((this._resourceClassID != value))
                {
                    this.OnResourceClassIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceClassID");
                    this.ValidateProperty("ResourceClassID", value);
                    this._resourceClassID = value;
                    this.RaiseDataMemberChanged("ResourceClassID");
                    this.OnResourceClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceDefinitionID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceDefinitionID
        {
            get
            {
                return this._resourceDefinitionID;
            }
            set
            {
                if ((this._resourceDefinitionID != value))
                {
                    this.OnResourceDefinitionIDChanging(value);
                    this.ValidateProperty("ResourceDefinitionID", value);
                    this._resourceDefinitionID = value;
                    this.RaisePropertyChanged("ResourceDefinitionID");
                    this.OnResourceDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceLot"/> entity instances.
        /// </summary>
        [Association("ResourceDefinition_ResourceLot", "ResourceDefinitionID", "ResourceDefinitionID")]
        [XmlIgnore()]
        public EntityCollection<ResourceLot> ResourceLots
        {
            get
            {
                if ((this._resourceLots == null))
                {
                    this._resourceLots = new EntityCollection<ResourceLot>(this, "ResourceLots", this.FilterResourceLots, this.AttachResourceLots, this.DetachResourceLots);
                }
                return this._resourceLots;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceProperty"/> entity instances.
        /// </summary>
        [Association("ResourceDefinition_ResourceProperty", "ResourceDefinitionID", "ResourceID")]
        [XmlIgnore()]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                if ((this._resourceProperties == null))
                {
                    this._resourceProperties = new EntityCollection<ResourceProperty>(this, "ResourceProperties", this.FilterResourceProperties, this.AttachResourceProperties, this.DetachResourceProperties);
                }
                return this._resourceProperties;
            }
        }
        
        private bool FilterResourceClass(ResourceClass entity)
        {
            return (entity.ResourceClassID == this.ResourceClassID);
        }
        
        private void AttachResourceLots(ResourceLot entity)
        {
            entity.ResourceDefinition = this;
        }
        
        private void DetachResourceLots(ResourceLot entity)
        {
            entity.ResourceDefinition = null;
        }
        
        private bool FilterResourceLots(ResourceLot entity)
        {
            return (entity.ResourceDefinitionID == this.ResourceDefinitionID);
        }
        
        private void AttachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceDefinition = this;
        }
        
        private void DetachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceDefinition = null;
        }
        
        private bool FilterResourceProperties(ResourceProperty entity)
        {
            return (entity.ResourceID == this.ResourceDefinitionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceDefinitionID;
        }
    }
    
    /// <summary>
    /// The 'ResourceInventory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceInventory : Entity
    {
        
        private Nullable<int> _quantity;
        
        private Nullable<int> _resourceDefinitionID;
        
        private int _resourceInventoryID;
        
        private string _unitOfMeasure;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnQuantityChanging(Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnResourceDefinitionIDChanging(Nullable<int> value);
        partial void OnResourceDefinitionIDChanged();
        partial void OnResourceInventoryIDChanging(int value);
        partial void OnResourceInventoryIDChanged();
        partial void OnUnitOfMeasureChanging(string value);
        partial void OnUnitOfMeasureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceInventory"/> class.
        /// </summary>
        public ResourceInventory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceDefinitionID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ResourceDefinitionID
        {
            get
            {
                return this._resourceDefinitionID;
            }
            set
            {
                if ((this._resourceDefinitionID != value))
                {
                    this.OnResourceDefinitionIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceDefinitionID");
                    this.ValidateProperty("ResourceDefinitionID", value);
                    this._resourceDefinitionID = value;
                    this.RaiseDataMemberChanged("ResourceDefinitionID");
                    this.OnResourceDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceInventoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceInventoryID
        {
            get
            {
                return this._resourceInventoryID;
            }
            set
            {
                if ((this._resourceInventoryID != value))
                {
                    this.OnResourceInventoryIDChanging(value);
                    this.ValidateProperty("ResourceInventoryID", value);
                    this._resourceInventoryID = value;
                    this.RaisePropertyChanged("ResourceInventoryID");
                    this.OnResourceInventoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasure' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UnitOfMeasure
        {
            get
            {
                return this._unitOfMeasure;
            }
            set
            {
                if ((this._unitOfMeasure != value))
                {
                    this.OnUnitOfMeasureChanging(value);
                    this.RaiseDataMemberChanging("UnitOfMeasure");
                    this.ValidateProperty("UnitOfMeasure", value);
                    this._unitOfMeasure = value;
                    this.RaiseDataMemberChanged("UnitOfMeasure");
                    this.OnUnitOfMeasureChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceInventoryID;
        }
    }
    
    /// <summary>
    /// The 'ResourceLevel' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceLevel : Entity
    {
        
        private string _description;
        
        private string _name;
        
        private int _resourceLevelID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnResourceLevelIDChanging(int value);
        partial void OnResourceLevelIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLevel"/> class.
        /// </summary>
        public ResourceLevel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLevelID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceLevelID
        {
            get
            {
                return this._resourceLevelID;
            }
            set
            {
                if ((this._resourceLevelID != value))
                {
                    this.OnResourceLevelIDChanging(value);
                    this.ValidateProperty("ResourceLevelID", value);
                    this._resourceLevelID = value;
                    this.RaisePropertyChanged("ResourceLevelID");
                    this.OnResourceLevelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceLevelID;
        }
    }
    
    /// <summary>
    /// The 'ResourceLot' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceLot : Entity
    {
        
        private Nullable<DateTime> _creationDate;
        
        private string _description;
        
        private string _label;
        
        private Nullable<DateTime> _lastChangeDate;
        
        private Nullable<int> _locationID;
        
        private Nullable<float> _quantity;
        
        private string _quantityUnitOfMeasure;
        
        private EntityRef<ResourceDefinition> _resourceDefinition;
        
        private Nullable<int> _resourceDefinitionID;
        
        private int _resourceLotID;
        
        private EntityRef<ResourceLotStatus> _resourceLotStatu;
        
        private Nullable<int> _resourceLotStatusID;
        
        private EntityCollection<ResourceLotTracking> _resourceLotTrackings;
        
        private EntityCollection<ResourceProperty> _resourceProperties;
        
        private Nullable<DateTime> _validFrom;
        
        private Nullable<DateTime> _validTo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreationDateChanging(Nullable<DateTime> value);
        partial void OnCreationDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnLastChangeDateChanging(Nullable<DateTime> value);
        partial void OnLastChangeDateChanged();
        partial void OnLocationIDChanging(Nullable<int> value);
        partial void OnLocationIDChanged();
        partial void OnQuantityChanging(Nullable<float> value);
        partial void OnQuantityChanged();
        partial void OnQuantityUnitOfMeasureChanging(string value);
        partial void OnQuantityUnitOfMeasureChanged();
        partial void OnResourceDefinitionIDChanging(Nullable<int> value);
        partial void OnResourceDefinitionIDChanged();
        partial void OnResourceLotIDChanging(int value);
        partial void OnResourceLotIDChanged();
        partial void OnResourceLotStatusIDChanging(Nullable<int> value);
        partial void OnResourceLotStatusIDChanged();
        partial void OnValidFromChanging(Nullable<DateTime> value);
        partial void OnValidFromChanged();
        partial void OnValidToChanging(Nullable<DateTime> value);
        partial void OnValidToChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLot"/> class.
        /// </summary>
        public ResourceLot()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                if ((this._creationDate != value))
                {
                    this.OnCreationDateChanging(value);
                    this.RaiseDataMemberChanging("CreationDate");
                    this.ValidateProperty("CreationDate", value);
                    this._creationDate = value;
                    this.RaiseDataMemberChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Label' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    this.OnLabelChanging(value);
                    this.RaiseDataMemberChanging("Label");
                    this.ValidateProperty("Label", value);
                    this._label = value;
                    this.RaiseDataMemberChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastChangeDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastChangeDate
        {
            get
            {
                return this._lastChangeDate;
            }
            set
            {
                if ((this._lastChangeDate != value))
                {
                    this.OnLastChangeDateChanging(value);
                    this.RaiseDataMemberChanging("LastChangeDate");
                    this.ValidateProperty("LastChangeDate", value);
                    this._lastChangeDate = value;
                    this.RaiseDataMemberChanged("LastChangeDate");
                    this.OnLastChangeDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> LocationID
        {
            get
            {
                return this._locationID;
            }
            set
            {
                if ((this._locationID != value))
                {
                    this.OnLocationIDChanging(value);
                    this.RaiseDataMemberChanging("LocationID");
                    this.ValidateProperty("LocationID", value);
                    this._locationID = value;
                    this.RaiseDataMemberChanged("LocationID");
                    this.OnLocationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuantityUnitOfMeasure' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string QuantityUnitOfMeasure
        {
            get
            {
                return this._quantityUnitOfMeasure;
            }
            set
            {
                if ((this._quantityUnitOfMeasure != value))
                {
                    this.OnQuantityUnitOfMeasureChanging(value);
                    this.RaiseDataMemberChanging("QuantityUnitOfMeasure");
                    this.ValidateProperty("QuantityUnitOfMeasure", value);
                    this._quantityUnitOfMeasure = value;
                    this.RaiseDataMemberChanged("QuantityUnitOfMeasure");
                    this.OnQuantityUnitOfMeasureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceDefinition"/> entity.
        /// </summary>
        [Association("ResourceDefinition_ResourceLot", "ResourceDefinitionID", "ResourceDefinitionID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceDefinition ResourceDefinition
        {
            get
            {
                if ((this._resourceDefinition == null))
                {
                    this._resourceDefinition = new EntityRef<ResourceDefinition>(this, "ResourceDefinition", this.FilterResourceDefinition);
                }
                return this._resourceDefinition.Entity;
            }
            set
            {
                ResourceDefinition previous = this.ResourceDefinition;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceDefinition", value);
                    if ((previous != null))
                    {
                        this._resourceDefinition.Entity = null;
                        previous.ResourceLots.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceDefinitionID = value.ResourceDefinitionID;
                    }
                    else
                    {
                        this.ResourceDefinitionID = default(Nullable<int>);
                    }
                    this._resourceDefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceLots.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceDefinition");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceDefinitionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ResourceDefinitionID
        {
            get
            {
                return this._resourceDefinitionID;
            }
            set
            {
                if ((this._resourceDefinitionID != value))
                {
                    this.OnResourceDefinitionIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceDefinitionID");
                    this.ValidateProperty("ResourceDefinitionID", value);
                    this._resourceDefinitionID = value;
                    this.RaiseDataMemberChanged("ResourceDefinitionID");
                    this.OnResourceDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLotID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceLotID
        {
            get
            {
                return this._resourceLotID;
            }
            set
            {
                if ((this._resourceLotID != value))
                {
                    this.OnResourceLotIDChanging(value);
                    this.ValidateProperty("ResourceLotID", value);
                    this._resourceLotID = value;
                    this.RaisePropertyChanged("ResourceLotID");
                    this.OnResourceLotIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceLotStatus"/> entity.
        /// </summary>
        [Association("ResourceLotStatus_ResourceLot", "ResourceLotStatusID", "ResourceLotStatusID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceLotStatus ResourceLotStatu
        {
            get
            {
                if ((this._resourceLotStatu == null))
                {
                    this._resourceLotStatu = new EntityRef<ResourceLotStatus>(this, "ResourceLotStatu", this.FilterResourceLotStatu);
                }
                return this._resourceLotStatu.Entity;
            }
            set
            {
                ResourceLotStatus previous = this.ResourceLotStatu;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceLotStatu", value);
                    if ((previous != null))
                    {
                        this._resourceLotStatu.Entity = null;
                        previous.ResourceLots.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceLotStatusID = value.ResourceLotStatusID;
                    }
                    else
                    {
                        this.ResourceLotStatusID = default(Nullable<int>);
                    }
                    this._resourceLotStatu.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceLots.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceLotStatu");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLotStatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ResourceLotStatusID
        {
            get
            {
                return this._resourceLotStatusID;
            }
            set
            {
                if ((this._resourceLotStatusID != value))
                {
                    this.OnResourceLotStatusIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceLotStatusID");
                    this.ValidateProperty("ResourceLotStatusID", value);
                    this._resourceLotStatusID = value;
                    this.RaiseDataMemberChanged("ResourceLotStatusID");
                    this.OnResourceLotStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceLotTracking"/> entity instances.
        /// </summary>
        [Association("ResourceLot_ResourceLotTracking", "ResourceLotID", "ResourceLotID")]
        [XmlIgnore()]
        public EntityCollection<ResourceLotTracking> ResourceLotTrackings
        {
            get
            {
                if ((this._resourceLotTrackings == null))
                {
                    this._resourceLotTrackings = new EntityCollection<ResourceLotTracking>(this, "ResourceLotTrackings", this.FilterResourceLotTrackings, this.AttachResourceLotTrackings, this.DetachResourceLotTrackings);
                }
                return this._resourceLotTrackings;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceProperty"/> entity instances.
        /// </summary>
        [Association("ResourceLot_ResourceProperty", "ResourceLotID", "ResourceID")]
        [XmlIgnore()]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                if ((this._resourceProperties == null))
                {
                    this._resourceProperties = new EntityCollection<ResourceProperty>(this, "ResourceProperties", this.FilterResourceProperties, this.AttachResourceProperties, this.DetachResourceProperties);
                }
                return this._resourceProperties;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidFrom' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ValidFrom
        {
            get
            {
                return this._validFrom;
            }
            set
            {
                if ((this._validFrom != value))
                {
                    this.OnValidFromChanging(value);
                    this.RaiseDataMemberChanging("ValidFrom");
                    this.ValidateProperty("ValidFrom", value);
                    this._validFrom = value;
                    this.RaiseDataMemberChanged("ValidFrom");
                    this.OnValidFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidTo' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ValidTo
        {
            get
            {
                return this._validTo;
            }
            set
            {
                if ((this._validTo != value))
                {
                    this.OnValidToChanging(value);
                    this.RaiseDataMemberChanging("ValidTo");
                    this.ValidateProperty("ValidTo", value);
                    this._validTo = value;
                    this.RaiseDataMemberChanged("ValidTo");
                    this.OnValidToChanged();
                }
            }
        }
        
        private bool FilterResourceDefinition(ResourceDefinition entity)
        {
            return (entity.ResourceDefinitionID == this.ResourceDefinitionID);
        }
        
        private bool FilterResourceLotStatu(ResourceLotStatus entity)
        {
            return (entity.ResourceLotStatusID == this.ResourceLotStatusID);
        }
        
        private void AttachResourceLotTrackings(ResourceLotTracking entity)
        {
            entity.ResourceLot = this;
        }
        
        private void DetachResourceLotTrackings(ResourceLotTracking entity)
        {
            entity.ResourceLot = null;
        }
        
        private bool FilterResourceLotTrackings(ResourceLotTracking entity)
        {
            return (entity.ResourceLotID == this.ResourceLotID);
        }
        
        private void AttachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceLot = this;
        }
        
        private void DetachResourceProperties(ResourceProperty entity)
        {
            entity.ResourceLot = null;
        }
        
        private bool FilterResourceProperties(ResourceProperty entity)
        {
            return (entity.ResourceID == this.ResourceLotID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceLotID;
        }
    }
    
    /// <summary>
    /// The 'ResourceLotStatus' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceLotStatus : Entity
    {
        
        private string _description;
        
        private EntityCollection<ResourceLot> _resourceLots;
        
        private int _resourceLotStatusID;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnResourceLotStatusIDChanging(int value);
        partial void OnResourceLotStatusIDChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLotStatus"/> class.
        /// </summary>
        public ResourceLotStatus()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ResourceLot"/> entity instances.
        /// </summary>
        [Association("ResourceLotStatus_ResourceLot", "ResourceLotStatusID", "ResourceLotStatusID")]
        [XmlIgnore()]
        public EntityCollection<ResourceLot> ResourceLots
        {
            get
            {
                if ((this._resourceLots == null))
                {
                    this._resourceLots = new EntityCollection<ResourceLot>(this, "ResourceLots", this.FilterResourceLots, this.AttachResourceLots, this.DetachResourceLots);
                }
                return this._resourceLots;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLotStatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceLotStatusID
        {
            get
            {
                return this._resourceLotStatusID;
            }
            set
            {
                if ((this._resourceLotStatusID != value))
                {
                    this.OnResourceLotStatusIDChanging(value);
                    this.ValidateProperty("ResourceLotStatusID", value);
                    this._resourceLotStatusID = value;
                    this.RaisePropertyChanged("ResourceLotStatusID");
                    this.OnResourceLotStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private void AttachResourceLots(ResourceLot entity)
        {
            entity.ResourceLotStatu = this;
        }
        
        private void DetachResourceLots(ResourceLot entity)
        {
            entity.ResourceLotStatu = null;
        }
        
        private bool FilterResourceLots(ResourceLot entity)
        {
            return (entity.ResourceLotStatusID == this.ResourceLotStatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceLotStatusID;
        }
    }
    
    /// <summary>
    /// The 'ResourceLotTracking' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceLotTracking : Entity
    {
        
        private string _description;
        
        private Nullable<int> _equipmentID;
        
        private string _operation;
        
        private EntityRef<ResourceLot> _resourceLot;
        
        private Nullable<int> _resourceLotID;
        
        private int _resourceLotTrackingID;
        
        private Nullable<DateTime> _trackingDate;
        
        private Nullable<int> _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentIDChanging(Nullable<int> value);
        partial void OnEquipmentIDChanged();
        partial void OnOperationChanging(string value);
        partial void OnOperationChanged();
        partial void OnResourceLotIDChanging(Nullable<int> value);
        partial void OnResourceLotIDChanged();
        partial void OnResourceLotTrackingIDChanging(int value);
        partial void OnResourceLotTrackingIDChanged();
        partial void OnTrackingDateChanging(Nullable<DateTime> value);
        partial void OnTrackingDateChanged();
        partial void OnUserIDChanging(Nullable<int> value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceLotTracking"/> class.
        /// </summary>
        public ResourceLotTracking()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EquipmentID
        {
            get
            {
                return this._equipmentID;
            }
            set
            {
                if ((this._equipmentID != value))
                {
                    this.OnEquipmentIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentID");
                    this.ValidateProperty("EquipmentID", value);
                    this._equipmentID = value;
                    this.RaiseDataMemberChanged("EquipmentID");
                    this.OnEquipmentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Operation' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    this.OnOperationChanging(value);
                    this.RaiseDataMemberChanging("Operation");
                    this.ValidateProperty("Operation", value);
                    this._operation = value;
                    this.RaiseDataMemberChanged("Operation");
                    this.OnOperationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceLot"/> entity.
        /// </summary>
        [Association("ResourceLot_ResourceLotTracking", "ResourceLotID", "ResourceLotID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceLot ResourceLot
        {
            get
            {
                if ((this._resourceLot == null))
                {
                    this._resourceLot = new EntityRef<ResourceLot>(this, "ResourceLot", this.FilterResourceLot);
                }
                return this._resourceLot.Entity;
            }
            set
            {
                ResourceLot previous = this.ResourceLot;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceLot", value);
                    if ((previous != null))
                    {
                        this._resourceLot.Entity = null;
                        previous.ResourceLotTrackings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceLotID = value.ResourceLotID;
                    }
                    else
                    {
                        this.ResourceLotID = default(Nullable<int>);
                    }
                    this._resourceLot.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceLotTrackings.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceLot");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLotID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ResourceLotID
        {
            get
            {
                return this._resourceLotID;
            }
            set
            {
                if ((this._resourceLotID != value))
                {
                    this.OnResourceLotIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceLotID");
                    this.ValidateProperty("ResourceLotID", value);
                    this._resourceLotID = value;
                    this.RaiseDataMemberChanged("ResourceLotID");
                    this.OnResourceLotIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceLotTrackingID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceLotTrackingID
        {
            get
            {
                return this._resourceLotTrackingID;
            }
            set
            {
                if ((this._resourceLotTrackingID != value))
                {
                    this.OnResourceLotTrackingIDChanging(value);
                    this.ValidateProperty("ResourceLotTrackingID", value);
                    this._resourceLotTrackingID = value;
                    this.RaisePropertyChanged("ResourceLotTrackingID");
                    this.OnResourceLotTrackingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrackingDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TrackingDate
        {
            get
            {
                return this._trackingDate;
            }
            set
            {
                if ((this._trackingDate != value))
                {
                    this.OnTrackingDateChanging(value);
                    this.RaiseDataMemberChanging("TrackingDate");
                    this.ValidateProperty("TrackingDate", value);
                    this._trackingDate = value;
                    this.RaiseDataMemberChanged("TrackingDate");
                    this.OnTrackingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        private bool FilterResourceLot(ResourceLot entity)
        {
            return (entity.ResourceLotID == this.ResourceLotID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceLotTrackingID;
        }
    }
    
    /// <summary>
    /// The 'ResourceProperty' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceProperty : Entity
    {
        
        private string _dataType;
        
        private string _nominalValue;
        
        private EntityRef<Property> _property;
        
        private int _propertyID;
        
        private EntityRef<ResourceClass> _resourceClass;
        
        private EntityRef<ResourceDefinition> _resourceDefinition;
        
        private int _resourceID;
        
        private EntityRef<ResourceLot> _resourceLot;
        
        private string _resourceType;
        
        private string _unitOfMeasure;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataTypeChanging(string value);
        partial void OnDataTypeChanged();
        partial void OnNominalValueChanging(string value);
        partial void OnNominalValueChanged();
        partial void OnPropertyIDChanging(int value);
        partial void OnPropertyIDChanged();
        partial void OnResourceIDChanging(int value);
        partial void OnResourceIDChanged();
        partial void OnResourceTypeChanging(string value);
        partial void OnResourceTypeChanged();
        partial void OnUnitOfMeasureChanging(string value);
        partial void OnUnitOfMeasureChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceProperty"/> class.
        /// </summary>
        public ResourceProperty()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DataType' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NominalValue' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string NominalValue
        {
            get
            {
                return this._nominalValue;
            }
            set
            {
                if ((this._nominalValue != value))
                {
                    this.OnNominalValueChanging(value);
                    this.RaiseDataMemberChanging("NominalValue");
                    this.ValidateProperty("NominalValue", value);
                    this._nominalValue = value;
                    this.RaiseDataMemberChanged("NominalValue");
                    this.OnNominalValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Property"/> entity.
        /// </summary>
        [Association("Property_ResourceProperty", "PropertyID", "PropertyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Property Property
        {
            get
            {
                if ((this._property == null))
                {
                    this._property = new EntityRef<Property>(this, "Property", this.FilterProperty);
                }
                return this._property.Entity;
            }
            set
            {
                Property previous = this.Property;
                if ((previous != value))
                {
                    this.ValidateProperty("Property", value);
                    if ((previous != null))
                    {
                        this._property.Entity = null;
                        previous.ResourceProperties.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PropertyID = value.PropertyID;
                    }
                    else
                    {
                        this.PropertyID = default(int);
                    }
                    this._property.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceProperties.Add(this);
                    }
                    this.RaisePropertyChanged("Property");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PropertyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int PropertyID
        {
            get
            {
                return this._propertyID;
            }
            set
            {
                if ((this._propertyID != value))
                {
                    this.OnPropertyIDChanging(value);
                    this.RaiseDataMemberChanging("PropertyID");
                    this.ValidateProperty("PropertyID", value);
                    this._propertyID = value;
                    this.RaiseDataMemberChanged("PropertyID");
                    this.OnPropertyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceClass"/> entity.
        /// </summary>
        [Association("ResourceClass_ResourceProperty", "ResourceID", "ResourceClassID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceClass ResourceClass
        {
            get
            {
                if ((this._resourceClass == null))
                {
                    this._resourceClass = new EntityRef<ResourceClass>(this, "ResourceClass", this.FilterResourceClass);
                }
                return this._resourceClass.Entity;
            }
            set
            {
                ResourceClass previous = this.ResourceClass;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceClass", value);
                    if ((previous != null))
                    {
                        this._resourceClass.Entity = null;
                        previous.ResourceProperties.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceID = value.ResourceClassID;
                    }
                    else
                    {
                        this.ResourceID = default(int);
                    }
                    this._resourceClass.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceProperties.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceClass");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceDefinition"/> entity.
        /// </summary>
        [Association("ResourceDefinition_ResourceProperty", "ResourceID", "ResourceDefinitionID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceDefinition ResourceDefinition
        {
            get
            {
                if ((this._resourceDefinition == null))
                {
                    this._resourceDefinition = new EntityRef<ResourceDefinition>(this, "ResourceDefinition", this.FilterResourceDefinition);
                }
                return this._resourceDefinition.Entity;
            }
            set
            {
                ResourceDefinition previous = this.ResourceDefinition;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceDefinition", value);
                    if ((previous != null))
                    {
                        this._resourceDefinition.Entity = null;
                        previous.ResourceProperties.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceID = value.ResourceDefinitionID;
                    }
                    else
                    {
                        this.ResourceID = default(int);
                    }
                    this._resourceDefinition.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceProperties.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceDefinition");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceID
        {
            get
            {
                return this._resourceID;
            }
            set
            {
                if ((this._resourceID != value))
                {
                    this.OnResourceIDChanging(value);
                    this.RaiseDataMemberChanging("ResourceID");
                    this.ValidateProperty("ResourceID", value);
                    this._resourceID = value;
                    this.RaiseDataMemberChanged("ResourceID");
                    this.OnResourceIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceLot"/> entity.
        /// </summary>
        [Association("ResourceLot_ResourceProperty", "ResourceID", "ResourceLotID", IsForeignKey=true)]
        [XmlIgnore()]
        public ResourceLot ResourceLot
        {
            get
            {
                if ((this._resourceLot == null))
                {
                    this._resourceLot = new EntityRef<ResourceLot>(this, "ResourceLot", this.FilterResourceLot);
                }
                return this._resourceLot.Entity;
            }
            set
            {
                ResourceLot previous = this.ResourceLot;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceLot", value);
                    if ((previous != null))
                    {
                        this._resourceLot.Entity = null;
                        previous.ResourceProperties.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceID = value.ResourceLotID;
                    }
                    else
                    {
                        this.ResourceID = default(int);
                    }
                    this._resourceLot.Entity = value;
                    if ((value != null))
                    {
                        value.ResourceProperties.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceLot");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceType' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string ResourceType
        {
            get
            {
                return this._resourceType;
            }
            set
            {
                if ((this._resourceType != value))
                {
                    this.OnResourceTypeChanging(value);
                    this.RaiseDataMemberChanging("ResourceType");
                    this.ValidateProperty("ResourceType", value);
                    this._resourceType = value;
                    this.RaiseDataMemberChanged("ResourceType");
                    this.OnResourceTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitOfMeasure' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UnitOfMeasure
        {
            get
            {
                return this._unitOfMeasure;
            }
            set
            {
                if ((this._unitOfMeasure != value))
                {
                    this.OnUnitOfMeasureChanging(value);
                    this.RaiseDataMemberChanging("UnitOfMeasure");
                    this.ValidateProperty("UnitOfMeasure", value);
                    this._unitOfMeasure = value;
                    this.RaiseDataMemberChanged("UnitOfMeasure");
                    this.OnUnitOfMeasureChanged();
                }
            }
        }
        
        private bool FilterProperty(Property entity)
        {
            return (entity.PropertyID == this.PropertyID);
        }
        
        private bool FilterResourceClass(ResourceClass entity)
        {
            return (entity.ResourceClassID == this.ResourceID);
        }
        
        private bool FilterResourceDefinition(ResourceDefinition entity)
        {
            return (entity.ResourceDefinitionID == this.ResourceID);
        }
        
        private bool FilterResourceLot(ResourceLot entity)
        {
            return (entity.ResourceLotID == this.ResourceID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._propertyID, this._resourceID);
        }
    }
    
    /// <summary>
    /// The 'ResourceType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ResourceType : Entity
    {
        
        private string _description;
        
        private string _name;
        
        private int _resourceTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnResourceTypeIDChanging(int value);
        partial void OnResourceTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceType"/> class.
        /// </summary>
        public ResourceType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ResourceTypeID
        {
            get
            {
                return this._resourceTypeID;
            }
            set
            {
                if ((this._resourceTypeID != value))
                {
                    this.OnResourceTypeIDChanging(value);
                    this.ValidateProperty("ResourceTypeID", value);
                    this._resourceTypeID = value;
                    this.RaisePropertyChanged("ResourceTypeID");
                    this.OnResourceTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resourceTypeID;
        }
    }
    
    /// <summary>
    /// The 'ScooterRawTyre' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ScooterRawTyre : Material
    {
        
        private Nullable<bool> _active;
        
        private string _cai;
        
        private string _dimension;
        
        private Nullable<int> _internalCode;
        
        private string _internalCodeText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnCAIChanging(string value);
        partial void OnCAIChanged();
        partial void OnDimensionChanging(string value);
        partial void OnDimensionChanged();
        partial void OnInternalCodeChanging(Nullable<int> value);
        partial void OnInternalCodeChanged();
        partial void OnInternalCodeTextChanging(string value);
        partial void OnInternalCodeTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScooterRawTyre"/> class.
        /// </summary>
        public ScooterRawTyre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CAI' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string CAI
        {
            get
            {
                return this._cai;
            }
            set
            {
                if ((this._cai != value))
                {
                    this.OnCAIChanging(value);
                    this.RaiseDataMemberChanging("CAI");
                    this.ValidateProperty("CAI", value);
                    this._cai = value;
                    this.RaiseDataMemberChanged("CAI");
                    this.OnCAIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dimension' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dimension
        {
            get
            {
                return this._dimension;
            }
            set
            {
                if ((this._dimension != value))
                {
                    this.OnDimensionChanging(value);
                    this.RaiseDataMemberChanging("Dimension");
                    this.ValidateProperty("Dimension", value);
                    this._dimension = value;
                    this.RaiseDataMemberChanged("Dimension");
                    this.OnDimensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> InternalCode
        {
            get
            {
                return this._internalCode;
            }
            set
            {
                if ((this._internalCode != value))
                {
                    this.OnInternalCodeChanging(value);
                    this.RaiseDataMemberChanging("InternalCode");
                    this.ValidateProperty("InternalCode", value);
                    this._internalCode = value;
                    this.RaiseDataMemberChanged("InternalCode");
                    this.OnInternalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCodeText' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string InternalCodeText
        {
            get
            {
                return this._internalCodeText;
            }
            set
            {
                if ((this._internalCodeText != value))
                {
                    this.OnInternalCodeTextChanging(value);
                    this.RaiseDataMemberChanging("InternalCodeText");
                    this.ValidateProperty("InternalCodeText", value);
                    this._internalCodeText = value;
                    this.RaiseDataMemberChanged("InternalCodeText");
                    this.OnInternalCodeTextChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'ScooterTyre' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Model")]
    public sealed partial class ScooterTyre : Material
    {
        
        private Nullable<bool> _active;
        
        private string _cai;
        
        private string _dezen;
        
        private string _dimension;
        
        private Nullable<int> _internalCode;
        
        private string _internalCodeText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnCAIChanging(string value);
        partial void OnCAIChanged();
        partial void OnDezenChanging(string value);
        partial void OnDezenChanged();
        partial void OnDimensionChanging(string value);
        partial void OnDimensionChanged();
        partial void OnInternalCodeChanging(Nullable<int> value);
        partial void OnInternalCodeChanged();
        partial void OnInternalCodeTextChanging(string value);
        partial void OnInternalCodeTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScooterTyre"/> class.
        /// </summary>
        public ScooterTyre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CAI' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string CAI
        {
            get
            {
                return this._cai;
            }
            set
            {
                if ((this._cai != value))
                {
                    this.OnCAIChanging(value);
                    this.RaiseDataMemberChanging("CAI");
                    this.ValidateProperty("CAI", value);
                    this._cai = value;
                    this.RaiseDataMemberChanged("CAI");
                    this.OnCAIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dezen' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dezen
        {
            get
            {
                return this._dezen;
            }
            set
            {
                if ((this._dezen != value))
                {
                    this.OnDezenChanging(value);
                    this.RaiseDataMemberChanging("Dezen");
                    this.ValidateProperty("Dezen", value);
                    this._dezen = value;
                    this.RaiseDataMemberChanged("Dezen");
                    this.OnDezenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dimension' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dimension
        {
            get
            {
                return this._dimension;
            }
            set
            {
                if ((this._dimension != value))
                {
                    this.OnDimensionChanging(value);
                    this.RaiseDataMemberChanging("Dimension");
                    this.ValidateProperty("Dimension", value);
                    this._dimension = value;
                    this.RaiseDataMemberChanged("Dimension");
                    this.OnDimensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> InternalCode
        {
            get
            {
                return this._internalCode;
            }
            set
            {
                if ((this._internalCode != value))
                {
                    this.OnInternalCodeChanging(value);
                    this.RaiseDataMemberChanging("InternalCode");
                    this.ValidateProperty("InternalCode", value);
                    this._internalCode = value;
                    this.RaiseDataMemberChanged("InternalCode");
                    this.OnInternalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCodeText' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string InternalCodeText
        {
            get
            {
                return this._internalCodeText;
            }
            set
            {
                if ((this._internalCodeText != value))
                {
                    this.OnInternalCodeTextChanging(value);
                    this.RaiseDataMemberChanging("InternalCodeText");
                    this.ValidateProperty("InternalCodeText", value);
                    this._internalCodeText = value;
                    this.RaiseDataMemberChanged("InternalCodeText");
                    this.OnInternalCodeTextChanged();
                }
            }
        }
    }
}
namespace T2T.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using T2T.Model;
    using T2T.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("T2T-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Carcass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Carcass : MaterialDefinition
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Carcass"/> class.
        /// </summary>
        public Carcass()
        {
            this.OnCreated();
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Equipment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Equipment : Entity
    {
        
        private string _description;
        
        private Nullable<int> _equipmentClassID;
        
        private int _equipmentID;
        
        private string _name;
        
        private Nullable<int> _parentEquipment;
        
        private string _path;
        
        private string _shortName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentClassIDChanging(Nullable<int> value);
        partial void OnEquipmentClassIDChanged();
        partial void OnEquipmentIDChanging(int value);
        partial void OnEquipmentIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentEquipmentChanging(Nullable<int> value);
        partial void OnParentEquipmentChanged();
        partial void OnPathChanging(string value);
        partial void OnPathChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Equipment"/> class.
        /// </summary>
        public Equipment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentClassID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EquipmentClassID
        {
            get
            {
                return this._equipmentClassID;
            }
            set
            {
                if ((this._equipmentClassID != value))
                {
                    this.OnEquipmentClassIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentClassID");
                    this.ValidateProperty("EquipmentClassID", value);
                    this._equipmentClassID = value;
                    this.RaiseDataMemberChanged("EquipmentClassID");
                    this.OnEquipmentClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EquipmentID
        {
            get
            {
                return this._equipmentID;
            }
            set
            {
                if ((this._equipmentID != value))
                {
                    this.OnEquipmentIDChanging(value);
                    this.ValidateProperty("EquipmentID", value);
                    this._equipmentID = value;
                    this.RaisePropertyChanged("EquipmentID");
                    this.OnEquipmentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentEquipment' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ParentEquipment
        {
            get
            {
                return this._parentEquipment;
            }
            set
            {
                if ((this._parentEquipment != value))
                {
                    this.OnParentEquipmentChanging(value);
                    this.RaiseDataMemberChanging("ParentEquipment");
                    this.ValidateProperty("ParentEquipment", value);
                    this._parentEquipment = value;
                    this.RaiseDataMemberChanged("ParentEquipment");
                    this.OnParentEquipmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Path' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                if ((this._path != value))
                {
                    this.OnPathChanging(value);
                    this.RaiseDataMemberChanging("Path");
                    this.ValidateProperty("Path", value);
                    this._path = value;
                    this.RaiseDataMemberChanged("Path");
                    this.OnPathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._equipmentID;
        }
    }
    
    /// <summary>
    /// The 'EquipmentClass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class EquipmentClass : Entity
    {
        
        private string _description;
        
        private int _equipmentClassID;
        
        private Nullable<int> _equipmentElementLevelID;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentClassIDChanging(int value);
        partial void OnEquipmentClassIDChanged();
        partial void OnEquipmentElementLevelIDChanging(Nullable<int> value);
        partial void OnEquipmentElementLevelIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentClass"/> class.
        /// </summary>
        public EquipmentClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentClassID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EquipmentClassID
        {
            get
            {
                return this._equipmentClassID;
            }
            set
            {
                if ((this._equipmentClassID != value))
                {
                    this.OnEquipmentClassIDChanging(value);
                    this.ValidateProperty("EquipmentClassID", value);
                    this._equipmentClassID = value;
                    this.RaisePropertyChanged("EquipmentClassID");
                    this.OnEquipmentClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentElementLevelID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EquipmentElementLevelID
        {
            get
            {
                return this._equipmentElementLevelID;
            }
            set
            {
                if ((this._equipmentElementLevelID != value))
                {
                    this.OnEquipmentElementLevelIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentElementLevelID");
                    this.ValidateProperty("EquipmentElementLevelID", value);
                    this._equipmentElementLevelID = value;
                    this.RaiseDataMemberChanged("EquipmentElementLevelID");
                    this.OnEquipmentElementLevelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._equipmentClassID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'EquipmentService' DomainService.
    /// </summary>
    public sealed partial class EquipmentContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentContext"/> class.
        /// </summary>
        public EquipmentContext() : 
                this(new WebDomainClient<IEquipmentServiceContract>(new Uri("T2T-Web-EquipmentService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The EquipmentService service URI.</param>
        public EquipmentContext(Uri serviceUri) : 
                this(new WebDomainClient<IEquipmentServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public EquipmentContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EquipmentClass"/> entity instances that have been loaded into this <see cref="EquipmentContext"/> instance.
        /// </summary>
        public EntitySet<EquipmentClass> EquipmentClasses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EquipmentClass>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EquipmentElementLevel"/> entity instances that have been loaded into this <see cref="EquipmentContext"/> instance.
        /// </summary>
        public EntitySet<EquipmentElementLevel> EquipmentElementLevels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EquipmentElementLevel>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Equipment"/> entity instances that have been loaded into this <see cref="EquipmentContext"/> instance.
        /// </summary>
        public EntitySet<Equipment> Equipments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Equipment>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EquipmentClass"/> entity instances using the 'GetEquipmentClasses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EquipmentClass"/> entity instances.</returns>
        public EntityQuery<EquipmentClass> GetEquipmentClassesQuery()
        {
            this.ValidateMethod("GetEquipmentClassesQuery", null);
            return base.CreateQuery<EquipmentClass>("GetEquipmentClasses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EquipmentElementLevel"/> entity instances using the 'GetEquipmentElementLevels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EquipmentElementLevel"/> entity instances.</returns>
        public EntityQuery<EquipmentElementLevel> GetEquipmentElementLevelsQuery()
        {
            this.ValidateMethod("GetEquipmentElementLevelsQuery", null);
            return base.CreateQuery<EquipmentElementLevel>("GetEquipmentElementLevels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Equipment"/> entity instances using the 'GetEquipments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Equipment"/> entity instances.</returns>
        public EntityQuery<Equipment> GetEquipmentsQuery()
        {
            this.ValidateMethod("GetEquipmentsQuery", null);
            return base.CreateQuery<Equipment>("GetEquipments", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new EquipmentContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'EquipmentService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IEquipmentServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEquipmentClasses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EquipmentService/GetEquipmentClassesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EquipmentService/GetEquipmentClasses", ReplyAction="http://tempuri.org/EquipmentService/GetEquipmentClassesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEquipmentClasses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEquipmentClasses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEquipmentClasses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEquipmentClasses' operation.</returns>
            QueryResult<EquipmentClass> EndGetEquipmentClasses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEquipmentElementLevels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EquipmentService/GetEquipmentElementLevelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EquipmentService/GetEquipmentElementLevels", ReplyAction="http://tempuri.org/EquipmentService/GetEquipmentElementLevelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEquipmentElementLevels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEquipmentElementLevels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEquipmentElementLevels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEquipmentElementLevels' operation.</returns>
            QueryResult<EquipmentElementLevel> EndGetEquipmentElementLevels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEquipments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EquipmentService/GetEquipmentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EquipmentService/GetEquipments", ReplyAction="http://tempuri.org/EquipmentService/GetEquipmentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEquipments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEquipments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEquipments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEquipments' operation.</returns>
            QueryResult<Equipment> EndGetEquipments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EquipmentService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EquipmentService/SubmitChanges", ReplyAction="http://tempuri.org/EquipmentService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class EquipmentContextEntityContainer : EntityContainer
        {
            
            public EquipmentContextEntityContainer()
            {
                this.CreateEntitySet<Equipment>(EntitySetOperations.All);
                this.CreateEntitySet<EquipmentClass>(EntitySetOperations.All);
                this.CreateEntitySet<EquipmentElementLevel>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'EquipmentElementLevel' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class EquipmentElementLevel : Entity
    {
        
        private string _description;
        
        private int _equipmentElementLevelID;
        
        private string _equipmentElementLevelName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentElementLevelIDChanging(int value);
        partial void OnEquipmentElementLevelIDChanged();
        partial void OnEquipmentElementLevelNameChanging(string value);
        partial void OnEquipmentElementLevelNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EquipmentElementLevel"/> class.
        /// </summary>
        public EquipmentElementLevel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentElementLevelID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EquipmentElementLevelID
        {
            get
            {
                return this._equipmentElementLevelID;
            }
            set
            {
                if ((this._equipmentElementLevelID != value))
                {
                    this.OnEquipmentElementLevelIDChanging(value);
                    this.ValidateProperty("EquipmentElementLevelID", value);
                    this._equipmentElementLevelID = value;
                    this.RaisePropertyChanged("EquipmentElementLevelID");
                    this.OnEquipmentElementLevelIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentElementLevelName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string EquipmentElementLevelName
        {
            get
            {
                return this._equipmentElementLevelName;
            }
            set
            {
                if ((this._equipmentElementLevelName != value))
                {
                    this.OnEquipmentElementLevelNameChanging(value);
                    this.RaiseDataMemberChanging("EquipmentElementLevelName");
                    this.ValidateProperty("EquipmentElementLevelName", value);
                    this._equipmentElementLevelName = value;
                    this.RaiseDataMemberChanged("EquipmentElementLevelName");
                    this.OnEquipmentElementLevelNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._equipmentElementLevelID;
        }
    }
    
    /// <summary>
    /// The 'Inerliner' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Inerliner : MaterialDefinition
    {
        
        private Nullable<int> _length;
        
        private Nullable<decimal> _thickness;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLengthChanging(Nullable<int> value);
        partial void OnLengthChanged();
        partial void OnThicknessChanging(Nullable<decimal> value);
        partial void OnThicknessChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Inerliner"/> class.
        /// </summary>
        public Inerliner()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Thickness' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Thickness
        {
            get
            {
                return this._thickness;
            }
            set
            {
                if ((this._thickness != value))
                {
                    this.OnThicknessChanging(value);
                    this.RaiseDataMemberChanging("Thickness");
                    this.ValidateProperty("Thickness", value);
                    this._thickness = value;
                    this.RaiseDataMemberChanged("Thickness");
                    this.OnThicknessChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Lank' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Lank : MaterialDefinition
    {
        
        private Nullable<int> _diameter;
        
        private string _lankTT;
        
        private Nullable<int> _perimeter;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiameterChanging(Nullable<int> value);
        partial void OnDiameterChanged();
        partial void OnLankTTChanging(string value);
        partial void OnLankTTChanged();
        partial void OnPerimeterChanging(Nullable<int> value);
        partial void OnPerimeterChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Lank"/> class.
        /// </summary>
        public Lank()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Diameter' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Diameter
        {
            get
            {
                return this._diameter;
            }
            set
            {
                if ((this._diameter != value))
                {
                    this.OnDiameterChanging(value);
                    this.RaiseDataMemberChanging("Diameter");
                    this.ValidateProperty("Diameter", value);
                    this._diameter = value;
                    this.RaiseDataMemberChanged("Diameter");
                    this.OnDiameterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LankTT' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string LankTT
        {
            get
            {
                return this._lankTT;
            }
            set
            {
                if ((this._lankTT != value))
                {
                    this.OnLankTTChanging(value);
                    this.RaiseDataMemberChanging("LankTT");
                    this.ValidateProperty("LankTT", value);
                    this._lankTT = value;
                    this.RaiseDataMemberChanged("LankTT");
                    this.OnLankTTChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Perimeter' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Perimeter
        {
            get
            {
                return this._perimeter;
            }
            set
            {
                if ((this._perimeter != value))
                {
                    this.OnPerimeterChanging(value);
                    this.RaiseDataMemberChanging("Perimeter");
                    this.ValidateProperty("Perimeter", value);
                    this._perimeter = value;
                    this.RaiseDataMemberChanged("Perimeter");
                    this.OnPerimeterChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'LotsService' DomainService.
    /// </summary>
    public sealed partial class LotsContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LotsContext"/> class.
        /// </summary>
        public LotsContext() : 
                this(new WebDomainClient<ILotsServiceContract>(new Uri("T2T-Web-LotsService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LotsContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LotsService service URI.</param>
        public LotsContext(Uri serviceUri) : 
                this(new WebDomainClient<ILotsServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LotsContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LotsContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="SemiFinishedMaterialInventory"/> entity instances that have been loaded into this <see cref="LotsContext"/> instance.
        /// </summary>
        public EntitySet<SemiFinishedMaterialInventory> SemiFinishedMaterialInventories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SemiFinishedMaterialInventory>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SemiFinishedMaterialInventory"/> entity instances using the 'GetSemiFinishedMaterialInventories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SemiFinishedMaterialInventory"/> entity instances.</returns>
        public EntityQuery<SemiFinishedMaterialInventory> GetSemiFinishedMaterialInventoriesQuery()
        {
            this.ValidateMethod("GetSemiFinishedMaterialInventoriesQuery", null);
            return base.CreateQuery<SemiFinishedMaterialInventory>("GetSemiFinishedMaterialInventories", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LotsContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LotsService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILotsServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSemiFinishedMaterialInventories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LotsService/GetSemiFinishedMaterialInventoriesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LotsService/GetSemiFinishedMaterialInventories", ReplyAction="http://tempuri.org/LotsService/GetSemiFinishedMaterialInventoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSemiFinishedMaterialInventories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSemiFinishedMaterialInventories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSemiFinishedMaterialInventories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSemiFinishedMaterialInventories' operation.</returns>
            QueryResult<SemiFinishedMaterialInventory> EndGetSemiFinishedMaterialInventories(IAsyncResult result);
        }
        
        internal sealed class LotsContextEntityContainer : EntityContainer
        {
            
            public LotsContextEntityContainer()
            {
                this.CreateEntitySet<SemiFinishedMaterialInventory>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'MaterialClass' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class MaterialClass : Entity
    {
        
        private EntityCollection<MaterialClass> _childClasses;
        
        private string _description;
        
        private int _materialClassID;
        
        private EntityCollection<MaterialDefinition> _materialDefinitions;
        
        private EntityRef<MaterialType> _materialType;
        
        private byte _materialTypeID;
        
        private string _name;
        
        private EntityRef<MaterialClass> _parentClass;
        
        private Nullable<int> _parentClassID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMaterialClassIDChanging(int value);
        partial void OnMaterialClassIDChanged();
        partial void OnMaterialTypeIDChanging(byte value);
        partial void OnMaterialTypeIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentClassIDChanging(Nullable<int> value);
        partial void OnParentClassIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialClass"/> class.
        /// </summary>
        public MaterialClass()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MaterialClass"/> entity instances.
        /// </summary>
        [Association("MaterialClass_MaterialClass", "MaterialClassID", "ParentClassID")]
        [XmlIgnore()]
        public EntityCollection<MaterialClass> ChildClasses
        {
            get
            {
                if ((this._childClasses == null))
                {
                    this._childClasses = new EntityCollection<MaterialClass>(this, "ChildClasses", this.FilterChildClasses, this.AttachChildClasses, this.DetachChildClasses);
                }
                return this._childClasses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialClassID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int MaterialClassID
        {
            get
            {
                return this._materialClassID;
            }
            set
            {
                if ((this._materialClassID != value))
                {
                    this.OnMaterialClassIDChanging(value);
                    this.ValidateProperty("MaterialClassID", value);
                    this._materialClassID = value;
                    this.RaisePropertyChanged("MaterialClassID");
                    this.OnMaterialClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MaterialDefinition"/> entity instances.
        /// </summary>
        [Association("MaterialClass_MaterialDefinition", "MaterialClassID", "MaterialClassID")]
        [XmlIgnore()]
        public EntityCollection<MaterialDefinition> MaterialDefinitions
        {
            get
            {
                if ((this._materialDefinitions == null))
                {
                    this._materialDefinitions = new EntityCollection<MaterialDefinition>(this, "MaterialDefinitions", this.FilterMaterialDefinitions, this.AttachMaterialDefinitions, this.DetachMaterialDefinitions);
                }
                return this._materialDefinitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MaterialType"/> entity.
        /// </summary>
        [Association("MaterialType_MaterialClass", "MaterialTypeID", "MaterialTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public MaterialType MaterialType
        {
            get
            {
                if ((this._materialType == null))
                {
                    this._materialType = new EntityRef<MaterialType>(this, "MaterialType", this.FilterMaterialType);
                }
                return this._materialType.Entity;
            }
            set
            {
                MaterialType previous = this.MaterialType;
                if ((previous != value))
                {
                    this.ValidateProperty("MaterialType", value);
                    if ((previous != null))
                    {
                        this._materialType.Entity = null;
                        previous.MaterialClasses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MaterialTypeID = value.MaterialTypeID;
                    }
                    else
                    {
                        this.MaterialTypeID = default(byte);
                    }
                    this._materialType.Entity = value;
                    if ((value != null))
                    {
                        value.MaterialClasses.Add(this);
                    }
                    this.RaisePropertyChanged("MaterialType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public byte MaterialTypeID
        {
            get
            {
                return this._materialTypeID;
            }
            set
            {
                if ((this._materialTypeID != value))
                {
                    this.OnMaterialTypeIDChanging(value);
                    this.RaiseDataMemberChanging("MaterialTypeID");
                    this.ValidateProperty("MaterialTypeID", value);
                    this._materialTypeID = value;
                    this.RaiseDataMemberChanged("MaterialTypeID");
                    this.OnMaterialTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MaterialClass"/> entity.
        /// </summary>
        [Association("MaterialClass_MaterialClass", "ParentClassID", "MaterialClassID", IsForeignKey=true)]
        [XmlIgnore()]
        public MaterialClass ParentClass
        {
            get
            {
                if ((this._parentClass == null))
                {
                    this._parentClass = new EntityRef<MaterialClass>(this, "ParentClass", this.FilterParentClass);
                }
                return this._parentClass.Entity;
            }
            set
            {
                MaterialClass previous = this.ParentClass;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentClass", value);
                    if ((previous != null))
                    {
                        this._parentClass.Entity = null;
                        previous.ChildClasses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentClassID = value.MaterialClassID;
                    }
                    else
                    {
                        this.ParentClassID = default(Nullable<int>);
                    }
                    this._parentClass.Entity = value;
                    if ((value != null))
                    {
                        value.ChildClasses.Add(this);
                    }
                    this.RaisePropertyChanged("ParentClass");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentClassID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ParentClassID
        {
            get
            {
                return this._parentClassID;
            }
            set
            {
                if ((this._parentClassID != value))
                {
                    this.OnParentClassIDChanging(value);
                    this.RaiseDataMemberChanging("ParentClassID");
                    this.ValidateProperty("ParentClassID", value);
                    this._parentClassID = value;
                    this.RaiseDataMemberChanged("ParentClassID");
                    this.OnParentClassIDChanged();
                }
            }
        }
        
        private void AttachChildClasses(MaterialClass entity)
        {
            entity.ParentClass = this;
        }
        
        private void DetachChildClasses(MaterialClass entity)
        {
            entity.ParentClass = null;
        }
        
        private bool FilterChildClasses(MaterialClass entity)
        {
            return (entity.ParentClassID == this.MaterialClassID);
        }
        
        private void AttachMaterialDefinitions(MaterialDefinition entity)
        {
            entity.MaterialClass = this;
        }
        
        private void DetachMaterialDefinitions(MaterialDefinition entity)
        {
            entity.MaterialClass = null;
        }
        
        private bool FilterMaterialDefinitions(MaterialDefinition entity)
        {
            return (entity.MaterialClassID == this.MaterialClassID);
        }
        
        private bool FilterMaterialType(MaterialType entity)
        {
            return (entity.MaterialTypeID == this.MaterialTypeID);
        }
        
        private bool FilterParentClass(MaterialClass entity)
        {
            return (entity.MaterialClassID == this.ParentClassID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._materialClassID;
        }
    }
    
    /// <summary>
    /// The 'MaterialDefinition' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    [KnownType(typeof(Carcass))]
    [KnownType(typeof(Inerliner))]
    [KnownType(typeof(Lank))]
    [KnownType(typeof(Ply))]
    [KnownType(typeof(Protector))]
    [KnownType(typeof(RawTyre))]
    [KnownType(typeof(Tyre))]
    public abstract partial class MaterialDefinition : Entity
    {
        
        private string _description;
        
        private EntityRef<MaterialClass> _materialClass;
        
        private int _materialClassID;
        
        private int _materialDefinitionID;
        
        private EntityCollection<MaterialLot> _materialLots;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMaterialClassIDChanging(int value);
        partial void OnMaterialClassIDChanged();
        partial void OnMaterialDefinitionIDChanging(int value);
        partial void OnMaterialDefinitionIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialDefinition"/> class.
        /// </summary>
        protected MaterialDefinition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MaterialClass"/> entity.
        /// </summary>
        [Association("MaterialClass_MaterialDefinition", "MaterialClassID", "MaterialClassID", IsForeignKey=true)]
        [XmlIgnore()]
        public MaterialClass MaterialClass
        {
            get
            {
                if ((this._materialClass == null))
                {
                    this._materialClass = new EntityRef<MaterialClass>(this, "MaterialClass", this.FilterMaterialClass);
                }
                return this._materialClass.Entity;
            }
            set
            {
                MaterialClass previous = this.MaterialClass;
                if ((previous != value))
                {
                    this.ValidateProperty("MaterialClass", value);
                    if ((previous != null))
                    {
                        this._materialClass.Entity = null;
                        previous.MaterialDefinitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MaterialClassID = value.MaterialClassID;
                    }
                    else
                    {
                        this.MaterialClassID = default(int);
                    }
                    this._materialClass.Entity = value;
                    if ((value != null))
                    {
                        value.MaterialDefinitions.Add(this);
                    }
                    this.RaisePropertyChanged("MaterialClass");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialClassID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MaterialClassID
        {
            get
            {
                return this._materialClassID;
            }
            set
            {
                if ((this._materialClassID != value))
                {
                    this.OnMaterialClassIDChanging(value);
                    this.RaiseDataMemberChanging("MaterialClassID");
                    this.ValidateProperty("MaterialClassID", value);
                    this._materialClassID = value;
                    this.RaiseDataMemberChanged("MaterialClassID");
                    this.OnMaterialClassIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialDefinitionID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int MaterialDefinitionID
        {
            get
            {
                return this._materialDefinitionID;
            }
            set
            {
                if ((this._materialDefinitionID != value))
                {
                    this.OnMaterialDefinitionIDChanging(value);
                    this.ValidateProperty("MaterialDefinitionID", value);
                    this._materialDefinitionID = value;
                    this.RaisePropertyChanged("MaterialDefinitionID");
                    this.OnMaterialDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MaterialLot"/> entity instances.
        /// </summary>
        [Association("MaterialDefinition_MaterialLot", "MaterialDefinitionID", "MaterialDefinitionID")]
        [XmlIgnore()]
        public EntityCollection<MaterialLot> MaterialLots
        {
            get
            {
                if ((this._materialLots == null))
                {
                    this._materialLots = new EntityCollection<MaterialLot>(this, "MaterialLots", this.FilterMaterialLots, this.AttachMaterialLots, this.DetachMaterialLots);
                }
                return this._materialLots;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private bool FilterMaterialClass(MaterialClass entity)
        {
            return (entity.MaterialClassID == this.MaterialClassID);
        }
        
        private void AttachMaterialLots(MaterialLot entity)
        {
            entity.MaterialDefinition = this;
        }
        
        private void DetachMaterialLots(MaterialLot entity)
        {
            entity.MaterialDefinition = null;
        }
        
        private bool FilterMaterialLots(MaterialLot entity)
        {
            return (entity.MaterialDefinitionID == this.MaterialDefinitionID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._materialDefinitionID;
        }
    }
    
    /// <summary>
    /// The 'MaterialLot' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class MaterialLot : Entity
    {
        
        private DateTime _creationDate;
        
        private string _description;
        
        private Nullable<int> _equipmentID;
        
        private string _lotID;
        
        private EntityRef<MaterialDefinition> _materialDefinition;
        
        private int _materialDefinitionID;
        
        private int _materialLotID;
        
        private EntityRef<MaterialLotStatus> _materialLotStatus;
        
        private int _materialLotStatusID;
        
        private decimal _quantity;
        
        private string _quantityUnitOfMeasure;
        
        private Nullable<int> _userID;
        
        private Nullable<DateTime> _validFrom;
        
        private Nullable<DateTime> _validTill;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreationDateChanging(DateTime value);
        partial void OnCreationDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentIDChanging(Nullable<int> value);
        partial void OnEquipmentIDChanged();
        partial void OnLotIDChanging(string value);
        partial void OnLotIDChanged();
        partial void OnMaterialDefinitionIDChanging(int value);
        partial void OnMaterialDefinitionIDChanged();
        partial void OnMaterialLotIDChanging(int value);
        partial void OnMaterialLotIDChanged();
        partial void OnMaterialLotStatusIDChanging(int value);
        partial void OnMaterialLotStatusIDChanged();
        partial void OnQuantityChanging(decimal value);
        partial void OnQuantityChanged();
        partial void OnQuantityUnitOfMeasureChanging(string value);
        partial void OnQuantityUnitOfMeasureChanged();
        partial void OnUserIDChanging(Nullable<int> value);
        partial void OnUserIDChanged();
        partial void OnValidFromChanging(Nullable<DateTime> value);
        partial void OnValidFromChanged();
        partial void OnValidTillChanging(Nullable<DateTime> value);
        partial void OnValidTillChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialLot"/> class.
        /// </summary>
        public MaterialLot()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CreationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                if ((this._creationDate != value))
                {
                    this.OnCreationDateChanging(value);
                    this.RaiseDataMemberChanging("CreationDate");
                    this.ValidateProperty("CreationDate", value);
                    this._creationDate = value;
                    this.RaiseDataMemberChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EquipmentID
        {
            get
            {
                return this._equipmentID;
            }
            set
            {
                if ((this._equipmentID != value))
                {
                    this.OnEquipmentIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentID");
                    this.ValidateProperty("EquipmentID", value);
                    this._equipmentID = value;
                    this.RaiseDataMemberChanged("EquipmentID");
                    this.OnEquipmentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string LotID
        {
            get
            {
                return this._lotID;
            }
            set
            {
                if ((this._lotID != value))
                {
                    this.OnLotIDChanging(value);
                    this.RaiseDataMemberChanging("LotID");
                    this.ValidateProperty("LotID", value);
                    this._lotID = value;
                    this.RaiseDataMemberChanged("LotID");
                    this.OnLotIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MaterialDefinition"/> entity.
        /// </summary>
        [Association("MaterialDefinition_MaterialLot", "MaterialDefinitionID", "MaterialDefinitionID", IsForeignKey=true)]
        [XmlIgnore()]
        public MaterialDefinition MaterialDefinition
        {
            get
            {
                if ((this._materialDefinition == null))
                {
                    this._materialDefinition = new EntityRef<MaterialDefinition>(this, "MaterialDefinition", this.FilterMaterialDefinition);
                }
                return this._materialDefinition.Entity;
            }
            set
            {
                MaterialDefinition previous = this.MaterialDefinition;
                if ((previous != value))
                {
                    this.ValidateProperty("MaterialDefinition", value);
                    if ((previous != null))
                    {
                        this._materialDefinition.Entity = null;
                        previous.MaterialLots.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MaterialDefinitionID = value.MaterialDefinitionID;
                    }
                    else
                    {
                        this.MaterialDefinitionID = default(int);
                    }
                    this._materialDefinition.Entity = value;
                    if ((value != null))
                    {
                        value.MaterialLots.Add(this);
                    }
                    this.RaisePropertyChanged("MaterialDefinition");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialDefinitionID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MaterialDefinitionID
        {
            get
            {
                return this._materialDefinitionID;
            }
            set
            {
                if ((this._materialDefinitionID != value))
                {
                    this.OnMaterialDefinitionIDChanging(value);
                    this.RaiseDataMemberChanging("MaterialDefinitionID");
                    this.ValidateProperty("MaterialDefinitionID", value);
                    this._materialDefinitionID = value;
                    this.RaiseDataMemberChanged("MaterialDefinitionID");
                    this.OnMaterialDefinitionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialLotID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int MaterialLotID
        {
            get
            {
                return this._materialLotID;
            }
            set
            {
                if ((this._materialLotID != value))
                {
                    this.OnMaterialLotIDChanging(value);
                    this.ValidateProperty("MaterialLotID", value);
                    this._materialLotID = value;
                    this.RaisePropertyChanged("MaterialLotID");
                    this.OnMaterialLotIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MaterialLotStatus"/> entity.
        /// </summary>
        [Association("MaterialLotStatus_MaterialLot", "MaterialLotStatusID", "LotStatusID", IsForeignKey=true)]
        [XmlIgnore()]
        public MaterialLotStatus MaterialLotStatus
        {
            get
            {
                if ((this._materialLotStatus == null))
                {
                    this._materialLotStatus = new EntityRef<MaterialLotStatus>(this, "MaterialLotStatus", this.FilterMaterialLotStatus);
                }
                return this._materialLotStatus.Entity;
            }
            set
            {
                MaterialLotStatus previous = this.MaterialLotStatus;
                if ((previous != value))
                {
                    this.ValidateProperty("MaterialLotStatus", value);
                    if ((previous != null))
                    {
                        this._materialLotStatus.Entity = null;
                        previous.MaterialLots.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MaterialLotStatusID = value.LotStatusID;
                    }
                    else
                    {
                        this.MaterialLotStatusID = default(int);
                    }
                    this._materialLotStatus.Entity = value;
                    if ((value != null))
                    {
                        value.MaterialLots.Add(this);
                    }
                    this.RaisePropertyChanged("MaterialLotStatus");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialLotStatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MaterialLotStatusID
        {
            get
            {
                return this._materialLotStatusID;
            }
            set
            {
                if ((this._materialLotStatusID != value))
                {
                    this.OnMaterialLotStatusIDChanging(value);
                    this.RaiseDataMemberChanging("MaterialLotStatusID");
                    this.ValidateProperty("MaterialLotStatusID", value);
                    this._materialLotStatusID = value;
                    this.RaiseDataMemberChanged("MaterialLotStatusID");
                    this.OnMaterialLotStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public decimal Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QuantityUnitOfMeasure' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string QuantityUnitOfMeasure
        {
            get
            {
                return this._quantityUnitOfMeasure;
            }
            set
            {
                if ((this._quantityUnitOfMeasure != value))
                {
                    this.OnQuantityUnitOfMeasureChanging(value);
                    this.RaiseDataMemberChanging("QuantityUnitOfMeasure");
                    this.ValidateProperty("QuantityUnitOfMeasure", value);
                    this._quantityUnitOfMeasure = value;
                    this.RaiseDataMemberChanged("QuantityUnitOfMeasure");
                    this.OnQuantityUnitOfMeasureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidFrom' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ValidFrom
        {
            get
            {
                return this._validFrom;
            }
            set
            {
                if ((this._validFrom != value))
                {
                    this.OnValidFromChanging(value);
                    this.RaiseDataMemberChanging("ValidFrom");
                    this.ValidateProperty("ValidFrom", value);
                    this._validFrom = value;
                    this.RaiseDataMemberChanged("ValidFrom");
                    this.OnValidFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidTill' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ValidTill
        {
            get
            {
                return this._validTill;
            }
            set
            {
                if ((this._validTill != value))
                {
                    this.OnValidTillChanging(value);
                    this.RaiseDataMemberChanging("ValidTill");
                    this.ValidateProperty("ValidTill", value);
                    this._validTill = value;
                    this.RaiseDataMemberChanged("ValidTill");
                    this.OnValidTillChanged();
                }
            }
        }
        
        private bool FilterMaterialDefinition(MaterialDefinition entity)
        {
            return (entity.MaterialDefinitionID == this.MaterialDefinitionID);
        }
        
        private bool FilterMaterialLotStatus(MaterialLotStatus entity)
        {
            return (entity.LotStatusID == this.MaterialLotStatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._materialLotID;
        }
    }
    
    /// <summary>
    /// The 'MaterialLotStatus' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class MaterialLotStatus : Entity
    {
        
        private string _description;
        
        private string _lotStatus;
        
        private int _lotStatusID;
        
        private EntityCollection<MaterialLot> _materialLots;
        
        private int _sortOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLotStatusChanging(string value);
        partial void OnLotStatusChanged();
        partial void OnLotStatusIDChanging(int value);
        partial void OnLotStatusIDChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialLotStatus"/> class.
        /// </summary>
        public MaterialLotStatus()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotStatus' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string LotStatus
        {
            get
            {
                return this._lotStatus;
            }
            set
            {
                if ((this._lotStatus != value))
                {
                    this.OnLotStatusChanging(value);
                    this.RaiseDataMemberChanging("LotStatus");
                    this.ValidateProperty("LotStatus", value);
                    this._lotStatus = value;
                    this.RaiseDataMemberChanged("LotStatus");
                    this.OnLotStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LotStatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LotStatusID
        {
            get
            {
                return this._lotStatusID;
            }
            set
            {
                if ((this._lotStatusID != value))
                {
                    this.OnLotStatusIDChanging(value);
                    this.ValidateProperty("LotStatusID", value);
                    this._lotStatusID = value;
                    this.RaisePropertyChanged("LotStatusID");
                    this.OnLotStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MaterialLot"/> entity instances.
        /// </summary>
        [Association("MaterialLotStatus_MaterialLot", "LotStatusID", "MaterialLotStatusID")]
        [XmlIgnore()]
        public EntityCollection<MaterialLot> MaterialLots
        {
            get
            {
                if ((this._materialLots == null))
                {
                    this._materialLots = new EntityCollection<MaterialLot>(this, "MaterialLots", this.FilterMaterialLots, this.AttachMaterialLots, this.DetachMaterialLots);
                }
                return this._materialLots;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        private void AttachMaterialLots(MaterialLot entity)
        {
            entity.MaterialLotStatus = this;
        }
        
        private void DetachMaterialLots(MaterialLot entity)
        {
            entity.MaterialLotStatus = null;
        }
        
        private bool FilterMaterialLots(MaterialLot entity)
        {
            return (entity.MaterialLotStatusID == this.LotStatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._lotStatusID;
        }
    }
    
    /// <summary>
    /// The 'MaterialLotTracking' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class MaterialLotTracking : Entity
    {
        
        private string _data;
        
        private string _description;
        
        private Nullable<int> _equipmentID;
        
        private int _materialLotID;
        
        private string _operation;
        
        private DateTime _trackingDate;
        
        private int _trackingID;
        
        private Nullable<int> _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEquipmentIDChanging(Nullable<int> value);
        partial void OnEquipmentIDChanged();
        partial void OnMaterialLotIDChanging(int value);
        partial void OnMaterialLotIDChanged();
        partial void OnOperationChanging(string value);
        partial void OnOperationChanged();
        partial void OnTrackingDateChanging(DateTime value);
        partial void OnTrackingDateChanged();
        partial void OnTrackingIDChanging(int value);
        partial void OnTrackingIDChanged();
        partial void OnUserIDChanging(Nullable<int> value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialLotTracking"/> class.
        /// </summary>
        public MaterialLotTracking()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EquipmentID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EquipmentID
        {
            get
            {
                return this._equipmentID;
            }
            set
            {
                if ((this._equipmentID != value))
                {
                    this.OnEquipmentIDChanging(value);
                    this.RaiseDataMemberChanging("EquipmentID");
                    this.ValidateProperty("EquipmentID", value);
                    this._equipmentID = value;
                    this.RaiseDataMemberChanged("EquipmentID");
                    this.OnEquipmentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialLotID' value.
        /// </summary>
        [DataMember()]
        public int MaterialLotID
        {
            get
            {
                return this._materialLotID;
            }
            set
            {
                if ((this._materialLotID != value))
                {
                    this.OnMaterialLotIDChanging(value);
                    this.RaiseDataMemberChanging("MaterialLotID");
                    this.ValidateProperty("MaterialLotID", value);
                    this._materialLotID = value;
                    this.RaiseDataMemberChanged("MaterialLotID");
                    this.OnMaterialLotIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Operation' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    this.OnOperationChanging(value);
                    this.RaiseDataMemberChanging("Operation");
                    this.ValidateProperty("Operation", value);
                    this._operation = value;
                    this.RaiseDataMemberChanged("Operation");
                    this.OnOperationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrackingDate' value.
        /// </summary>
        [DataMember()]
        public DateTime TrackingDate
        {
            get
            {
                return this._trackingDate;
            }
            set
            {
                if ((this._trackingDate != value))
                {
                    this.OnTrackingDateChanging(value);
                    this.RaiseDataMemberChanging("TrackingDate");
                    this.ValidateProperty("TrackingDate", value);
                    this._trackingDate = value;
                    this.RaiseDataMemberChanged("TrackingDate");
                    this.OnTrackingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrackingID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TrackingID
        {
            get
            {
                return this._trackingID;
            }
            set
            {
                if ((this._trackingID != value))
                {
                    this.OnTrackingIDChanging(value);
                    this.ValidateProperty("TrackingID", value);
                    this._trackingID = value;
                    this.RaisePropertyChanged("TrackingID");
                    this.OnTrackingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._trackingID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MaterialsService' DomainService.
    /// </summary>
    public sealed partial class MaterialsContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsContext"/> class.
        /// </summary>
        public MaterialsContext() : 
                this(new WebDomainClient<IMaterialsServiceContract>(new Uri("T2T-Web-MaterialsService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MaterialsService service URI.</param>
        public MaterialsContext(Uri serviceUri) : 
                this(new WebDomainClient<IMaterialsServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialsContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MaterialsContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialClass"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialClass> MaterialClasses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialClass>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialDefinition"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialDefinition> MaterialDefinitions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialDefinition>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialLot"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialLot> MaterialLots
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialLot>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialLotStatus"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialLotStatus> MaterialLotStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialLotStatus>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialLotTracking"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialLotTracking> MaterialLotTrackings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialLotTracking>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MaterialType"/> entity instances that have been loaded into this <see cref="MaterialsContext"/> instance.
        /// </summary>
        public EntitySet<MaterialType> MaterialTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MaterialType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialClass"/> entity instances using the 'GetMaterialClasses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialClass"/> entity instances.</returns>
        public EntityQuery<MaterialClass> GetMaterialClassesQuery()
        {
            this.ValidateMethod("GetMaterialClassesQuery", null);
            return base.CreateQuery<MaterialClass>("GetMaterialClasses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialDefinition"/> entity instances using the 'GetMaterialDefinitions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialDefinition"/> entity instances.</returns>
        public EntityQuery<MaterialDefinition> GetMaterialDefinitionsQuery()
        {
            this.ValidateMethod("GetMaterialDefinitionsQuery", null);
            return base.CreateQuery<MaterialDefinition>("GetMaterialDefinitions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialDefinition"/> entity instances using the 'GetMaterialDefinitionsForClass' query.
        /// </summary>
        /// <param name="classID">The value for the 'classID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialDefinition"/> entity instances.</returns>
        public EntityQuery<MaterialDefinition> GetMaterialDefinitionsForClassQuery(Nullable<int> classID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classID", classID);
            this.ValidateMethod("GetMaterialDefinitionsForClassQuery", parameters);
            return base.CreateQuery<MaterialDefinition>("GetMaterialDefinitionsForClass", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialLot"/> entity instances using the 'GetMaterialLots' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialLot"/> entity instances.</returns>
        public EntityQuery<MaterialLot> GetMaterialLotsQuery()
        {
            this.ValidateMethod("GetMaterialLotsQuery", null);
            return base.CreateQuery<MaterialLot>("GetMaterialLots", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialLot"/> entity instances using the 'GetMaterialLotsForDate' query.
        /// </summary>
        /// <param name="date">The value for the 'date' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialLot"/> entity instances.</returns>
        public EntityQuery<MaterialLot> GetMaterialLotsForDateQuery(DateTime date)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            this.ValidateMethod("GetMaterialLotsForDateQuery", parameters);
            return base.CreateQuery<MaterialLot>("GetMaterialLotsForDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialLot"/> entity instances using the 'GetMaterialLotsForEquipmentDate' query.
        /// </summary>
        /// <param name="date">The value for the 'date' parameter of the query.</param>
        /// <param name="equipmentID">The value for the 'equipmentID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialLot"/> entity instances.</returns>
        public EntityQuery<MaterialLot> GetMaterialLotsForEquipmentDateQuery(DateTime date, int equipmentID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("date", date);
            parameters.Add("equipmentID", equipmentID);
            this.ValidateMethod("GetMaterialLotsForEquipmentDateQuery", parameters);
            return base.CreateQuery<MaterialLot>("GetMaterialLotsForEquipmentDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialLotStatus"/> entity instances using the 'GetMaterialLotStatuses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialLotStatus"/> entity instances.</returns>
        public EntityQuery<MaterialLotStatus> GetMaterialLotStatusesQuery()
        {
            this.ValidateMethod("GetMaterialLotStatusesQuery", null);
            return base.CreateQuery<MaterialLotStatus>("GetMaterialLotStatuses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialLotTracking"/> entity instances using the 'GetMaterialLotTrackings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialLotTracking"/> entity instances.</returns>
        public EntityQuery<MaterialLotTracking> GetMaterialLotTrackingsQuery()
        {
            this.ValidateMethod("GetMaterialLotTrackingsQuery", null);
            return base.CreateQuery<MaterialLotTracking>("GetMaterialLotTrackings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MaterialType"/> entity instances using the 'GetMaterialTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MaterialType"/> entity instances.</returns>
        public EntityQuery<MaterialType> GetMaterialTypesQuery()
        {
            this.ValidateMethod("GetMaterialTypesQuery", null);
            return base.CreateQuery<MaterialType>("GetMaterialTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MaterialsContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MaterialsService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMaterialsServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialClasses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialClassesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialClasses", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialClassesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialClasses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialClasses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialClasses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialClasses' operation.</returns>
            QueryResult<MaterialClass> EndGetMaterialClasses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialDefinitions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialDefinitionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialDefinitions", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialDefinitionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialDefinitions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialDefinitions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialDefinitions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialDefinitions' operation.</returns>
            QueryResult<MaterialDefinition> EndGetMaterialDefinitions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialDefinitionsForClass' operation.
            /// </summary>
            /// <param name="classID">The value for the 'classID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialDefinitionsForClassDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialDefinitionsForClass", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialDefinitionsForClassResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialDefinitionsForClass(Nullable<int> classID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialDefinitionsForClass'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialDefinitionsForClass'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialDefinitionsForClass' operation.</returns>
            QueryResult<MaterialDefinition> EndGetMaterialDefinitionsForClass(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialLots' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialLotsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialLots", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialLotsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialLots(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialLots'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialLots'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialLots' operation.</returns>
            QueryResult<MaterialLot> EndGetMaterialLots(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialLotsForDate' operation.
            /// </summary>
            /// <param name="date">The value for the 'date' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialLotsForDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialLotsForDate", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialLotsForDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialLotsForDate(DateTime date, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialLotsForDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialLotsForDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialLotsForDate' operation.</returns>
            QueryResult<MaterialLot> EndGetMaterialLotsForDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialLotsForEquipmentDate' operation.
            /// </summary>
            /// <param name="date">The value for the 'date' parameter of this action.</param>
            /// <param name="equipmentID">The value for the 'equipmentID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialLotsForEquipmentDateDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialLotsForEquipmentDate", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialLotsForEquipmentDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialLotsForEquipmentDate(DateTime date, int equipmentID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialLotsForEquipmentDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialLotsForEquipmentDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialLotsForEquipmentDate' operation.</returns>
            QueryResult<MaterialLot> EndGetMaterialLotsForEquipmentDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialLotStatuses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialLotStatusesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialLotStatuses", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialLotStatusesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialLotStatuses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialLotStatuses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialLotStatuses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialLotStatuses' operation.</returns>
            QueryResult<MaterialLotStatus> EndGetMaterialLotStatuses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialLotTrackings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialLotTrackingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialLotTrackings", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialLotTrackingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialLotTrackings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialLotTrackings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialLotTrackings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialLotTrackings' operation.</returns>
            QueryResult<MaterialLotTracking> EndGetMaterialLotTrackings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/GetMaterialTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/GetMaterialTypes", ReplyAction="http://tempuri.org/MaterialsService/GetMaterialTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialTypes' operation.</returns>
            QueryResult<MaterialType> EndGetMaterialTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MaterialsService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MaterialsService/SubmitChanges", ReplyAction="http://tempuri.org/MaterialsService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MaterialsContextEntityContainer : EntityContainer
        {
            
            public MaterialsContextEntityContainer()
            {
                this.CreateEntitySet<MaterialClass>(EntitySetOperations.All);
                this.CreateEntitySet<MaterialDefinition>(EntitySetOperations.All);
                this.CreateEntitySet<MaterialLot>(EntitySetOperations.All);
                this.CreateEntitySet<MaterialLotStatus>(EntitySetOperations.All);
                this.CreateEntitySet<MaterialLotTracking>(EntitySetOperations.All);
                this.CreateEntitySet<MaterialType>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'MaterialType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class MaterialType : Entity
    {
        
        private string _description;
        
        private EntityCollection<MaterialClass> _materialClasses;
        
        private byte _materialTypeID;
        
        private string _typeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMaterialTypeIDChanging(byte value);
        partial void OnMaterialTypeIDChanged();
        partial void OnTypeIDChanging(string value);
        partial void OnTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaterialType"/> class.
        /// </summary>
        public MaterialType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(256)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MaterialClass"/> entity instances.
        /// </summary>
        [Association("MaterialType_MaterialClass", "MaterialTypeID", "MaterialTypeID")]
        [XmlIgnore()]
        public EntityCollection<MaterialClass> MaterialClasses
        {
            get
            {
                if ((this._materialClasses == null))
                {
                    this._materialClasses = new EntityCollection<MaterialClass>(this, "MaterialClasses", this.FilterMaterialClasses, this.AttachMaterialClasses, this.DetachMaterialClasses);
                }
                return this._materialClasses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaterialTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public byte MaterialTypeID
        {
            get
            {
                return this._materialTypeID;
            }
            set
            {
                if ((this._materialTypeID != value))
                {
                    this.OnMaterialTypeIDChanging(value);
                    this.ValidateProperty("MaterialTypeID", value);
                    this._materialTypeID = value;
                    this.RaisePropertyChanged("MaterialTypeID");
                    this.OnMaterialTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string TypeID
        {
            get
            {
                return this._typeID;
            }
            set
            {
                if ((this._typeID != value))
                {
                    this.OnTypeIDChanging(value);
                    this.RaiseDataMemberChanging("TypeID");
                    this.ValidateProperty("TypeID", value);
                    this._typeID = value;
                    this.RaiseDataMemberChanged("TypeID");
                    this.OnTypeIDChanged();
                }
            }
        }
        
        private void AttachMaterialClasses(MaterialClass entity)
        {
            entity.MaterialType = this;
        }
        
        private void DetachMaterialClasses(MaterialClass entity)
        {
            entity.MaterialType = null;
        }
        
        private bool FilterMaterialClasses(MaterialClass entity)
        {
            return (entity.MaterialTypeID == this.MaterialTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._materialTypeID;
        }
    }
    
    /// <summary>
    /// The 'Ply' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Ply : MaterialDefinition
    {
        
        private Nullable<decimal> _angle;
        
        private Nullable<int> _lenght;
        
        private Nullable<byte> _number;
        
        private string _symbol;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAngleChanging(Nullable<decimal> value);
        partial void OnAngleChanged();
        partial void OnLenghtChanging(Nullable<int> value);
        partial void OnLenghtChanged();
        partial void OnNumberChanging(Nullable<byte> value);
        partial void OnNumberChanged();
        partial void OnSymbolChanging(string value);
        partial void OnSymbolChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Ply"/> class.
        /// </summary>
        public Ply()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Angle' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Angle
        {
            get
            {
                return this._angle;
            }
            set
            {
                if ((this._angle != value))
                {
                    this.OnAngleChanging(value);
                    this.RaiseDataMemberChanging("Angle");
                    this.ValidateProperty("Angle", value);
                    this._angle = value;
                    this.RaiseDataMemberChanged("Angle");
                    this.OnAngleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Lenght' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Lenght
        {
            get
            {
                return this._lenght;
            }
            set
            {
                if ((this._lenght != value))
                {
                    this.OnLenghtChanging(value);
                    this.RaiseDataMemberChanging("Lenght");
                    this.ValidateProperty("Lenght", value);
                    this._lenght = value;
                    this.RaiseDataMemberChanged("Lenght");
                    this.OnLenghtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Symbol' value.
        /// </summary>
        [DataMember()]
        [StringLength(4)]
        public string Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if ((this._symbol != value))
                {
                    this.OnSymbolChanging(value);
                    this.RaiseDataMemberChanging("Symbol");
                    this.ValidateProperty("Symbol", value);
                    this._symbol = value;
                    this.RaiseDataMemberChanged("Symbol");
                    this.OnSymbolChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Protector' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Protector : MaterialDefinition
    {
        
        private Nullable<int> _length;
        
        private string _profileCode;
        
        private Nullable<int> _sirinaRamena;
        
        private Nullable<int> _weight;
        
        private Nullable<int> _width;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLengthChanging(Nullable<int> value);
        partial void OnLengthChanged();
        partial void OnProfileCodeChanging(string value);
        partial void OnProfileCodeChanged();
        partial void OnSirinaRamenaChanging(Nullable<int> value);
        partial void OnSirinaRamenaChanged();
        partial void OnWeightChanging(Nullable<int> value);
        partial void OnWeightChanged();
        partial void OnWidthChanging(Nullable<int> value);
        partial void OnWidthChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Protector"/> class.
        /// </summary>
        public Protector()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ProfileCode
        {
            get
            {
                return this._profileCode;
            }
            set
            {
                if ((this._profileCode != value))
                {
                    this.OnProfileCodeChanging(value);
                    this.RaiseDataMemberChanging("ProfileCode");
                    this.ValidateProperty("ProfileCode", value);
                    this._profileCode = value;
                    this.RaiseDataMemberChanged("ProfileCode");
                    this.OnProfileCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SirinaRamena' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SirinaRamena
        {
            get
            {
                return this._sirinaRamena;
            }
            set
            {
                if ((this._sirinaRamena != value))
                {
                    this.OnSirinaRamenaChanging(value);
                    this.RaiseDataMemberChanging("SirinaRamena");
                    this.ValidateProperty("SirinaRamena", value);
                    this._sirinaRamena = value;
                    this.RaiseDataMemberChanged("SirinaRamena");
                    this.OnSirinaRamenaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Width' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Width
        {
            get
            {
                return this._width;
            }
            set
            {
                if ((this._width != value))
                {
                    this.OnWidthChanging(value);
                    this.RaiseDataMemberChanging("Width");
                    this.ValidateProperty("Width", value);
                    this._width = value;
                    this.RaiseDataMemberChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'RawTyre' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class RawTyre : MaterialDefinition
    {
        
        private Nullable<bool> _active;
        
        private string _cai;
        
        private string _dimension;
        
        private Nullable<int> _internalCode;
        
        private string _internalCodeText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnCAIChanging(string value);
        partial void OnCAIChanged();
        partial void OnDimensionChanging(string value);
        partial void OnDimensionChanged();
        partial void OnInternalCodeChanging(Nullable<int> value);
        partial void OnInternalCodeChanged();
        partial void OnInternalCodeTextChanging(string value);
        partial void OnInternalCodeTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RawTyre"/> class.
        /// </summary>
        public RawTyre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CAI' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string CAI
        {
            get
            {
                return this._cai;
            }
            set
            {
                if ((this._cai != value))
                {
                    this.OnCAIChanging(value);
                    this.RaiseDataMemberChanging("CAI");
                    this.ValidateProperty("CAI", value);
                    this._cai = value;
                    this.RaiseDataMemberChanged("CAI");
                    this.OnCAIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dimension' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dimension
        {
            get
            {
                return this._dimension;
            }
            set
            {
                if ((this._dimension != value))
                {
                    this.OnDimensionChanging(value);
                    this.RaiseDataMemberChanging("Dimension");
                    this.ValidateProperty("Dimension", value);
                    this._dimension = value;
                    this.RaiseDataMemberChanged("Dimension");
                    this.OnDimensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> InternalCode
        {
            get
            {
                return this._internalCode;
            }
            set
            {
                if ((this._internalCode != value))
                {
                    this.OnInternalCodeChanging(value);
                    this.RaiseDataMemberChanging("InternalCode");
                    this.ValidateProperty("InternalCode", value);
                    this._internalCode = value;
                    this.RaiseDataMemberChanged("InternalCode");
                    this.OnInternalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCodeText' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string InternalCodeText
        {
            get
            {
                return this._internalCodeText;
            }
            set
            {
                if ((this._internalCodeText != value))
                {
                    this.OnInternalCodeTextChanging(value);
                    this.RaiseDataMemberChanging("InternalCodeText");
                    this.ValidateProperty("InternalCodeText", value);
                    this._internalCodeText = value;
                    this.RaiseDataMemberChanged("InternalCodeText");
                    this.OnInternalCodeTextChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ResourcesService' DomainService.
    /// </summary>
    public sealed partial class ResourcesContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesContext"/> class.
        /// </summary>
        public ResourcesContext() : 
                this(new WebDomainClient<IResourcesServiceContract>(new Uri("T2T-Web-ResourcesService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ResourcesService service URI.</param>
        public ResourcesContext(Uri serviceUri) : 
                this(new WebDomainClient<IResourcesServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ResourcesContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BillOfResource"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<BillOfResource> BillOfResources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BillOfResource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceClass"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceClass> ResourceClasses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceClass>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceDefinition"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceDefinition> ResourceDefinitions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceDefinition>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Property"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<Property> Properties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Property>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceInventory"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceInventory> ResourceInventories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceInventory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceLevel"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceLevel> ResourceLevels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceLevel>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceLot"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceLot> ResourceLots
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceLot>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceLotStatus"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceLotStatus> ResourceLotStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceLotStatus>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceLotTracking"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceLotTracking> ResourceLotTrackings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceLotTracking>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceProperty"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceProperty> ResourceProperties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceProperty>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceType"/> entity instances that have been loaded into this <see cref="ResourcesContext"/> instance.
        /// </summary>
        public EntitySet<ResourceType> ResourceTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BillOfResource"/> entity instances using the 'GetBillOfResources' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BillOfResource"/> entity instances.</returns>
        public EntityQuery<BillOfResource> GetBillOfResourcesQuery()
        {
            this.ValidateMethod("GetBillOfResourcesQuery", null);
            return base.CreateQuery<BillOfResource>("GetBillOfResources", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceClass"/> entity instances using the 'GetMaterialClasses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceClass"/> entity instances.</returns>
        public EntityQuery<ResourceClass> GetMaterialClassesQuery()
        {
            this.ValidateMethod("GetMaterialClassesQuery", null);
            return base.CreateQuery<ResourceClass>("GetMaterialClasses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceDefinition"/> entity instances using the 'GetMaterialDefinitions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceDefinition"/> entity instances.</returns>
        public EntityQuery<ResourceDefinition> GetMaterialDefinitionsQuery()
        {
            this.ValidateMethod("GetMaterialDefinitionsQuery", null);
            return base.CreateQuery<ResourceDefinition>("GetMaterialDefinitions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceDefinition"/> entity instances using the 'GetMaterialDefinitionsForClass' query.
        /// </summary>
        /// <param name="classID">The value for the 'classID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceDefinition"/> entity instances.</returns>
        public EntityQuery<ResourceDefinition> GetMaterialDefinitionsForClassQuery(Nullable<int> classID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classID", classID);
            this.ValidateMethod("GetMaterialDefinitionsForClassQuery", parameters);
            return base.CreateQuery<ResourceDefinition>("GetMaterialDefinitionsForClass", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceDefinition"/> entity instances using the 'GetMaterialDefinitionsForClassSearch' query.
        /// </summary>
        /// <param name="classID">The value for the 'classID' parameter of the query.</param>
        /// <param name="keyword">The value for the 'keyword' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceDefinition"/> entity instances.</returns>
        public EntityQuery<ResourceDefinition> GetMaterialDefinitionsForClassSearchQuery(Nullable<int> classID, string keyword)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("classID", classID);
            parameters.Add("keyword", keyword);
            this.ValidateMethod("GetMaterialDefinitionsForClassSearchQuery", parameters);
            return base.CreateQuery<ResourceDefinition>("GetMaterialDefinitionsForClassSearch", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Property"/> entity instances using the 'GetProperties' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Property"/> entity instances.</returns>
        public EntityQuery<Property> GetPropertiesQuery()
        {
            this.ValidateMethod("GetPropertiesQuery", null);
            return base.CreateQuery<Property>("GetProperties", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceClass"/> entity instances using the 'GetResourceClasses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceClass"/> entity instances.</returns>
        public EntityQuery<ResourceClass> GetResourceClassesQuery()
        {
            this.ValidateMethod("GetResourceClassesQuery", null);
            return base.CreateQuery<ResourceClass>("GetResourceClasses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceDefinition"/> entity instances using the 'GetResourceDefinitions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceDefinition"/> entity instances.</returns>
        public EntityQuery<ResourceDefinition> GetResourceDefinitionsQuery()
        {
            this.ValidateMethod("GetResourceDefinitionsQuery", null);
            return base.CreateQuery<ResourceDefinition>("GetResourceDefinitions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceInventory"/> entity instances using the 'GetResourceInventories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceInventory"/> entity instances.</returns>
        public EntityQuery<ResourceInventory> GetResourceInventoriesQuery()
        {
            this.ValidateMethod("GetResourceInventoriesQuery", null);
            return base.CreateQuery<ResourceInventory>("GetResourceInventories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceLevel"/> entity instances using the 'GetResourceLevels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceLevel"/> entity instances.</returns>
        public EntityQuery<ResourceLevel> GetResourceLevelsQuery()
        {
            this.ValidateMethod("GetResourceLevelsQuery", null);
            return base.CreateQuery<ResourceLevel>("GetResourceLevels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceLot"/> entity instances using the 'GetResourceLots' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceLot"/> entity instances.</returns>
        public EntityQuery<ResourceLot> GetResourceLotsQuery()
        {
            this.ValidateMethod("GetResourceLotsQuery", null);
            return base.CreateQuery<ResourceLot>("GetResourceLots", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceLotStatus"/> entity instances using the 'GetResourceLotStatuses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceLotStatus"/> entity instances.</returns>
        public EntityQuery<ResourceLotStatus> GetResourceLotStatusesQuery()
        {
            this.ValidateMethod("GetResourceLotStatusesQuery", null);
            return base.CreateQuery<ResourceLotStatus>("GetResourceLotStatuses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceLotTracking"/> entity instances using the 'GetResourceLotTrackings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceLotTracking"/> entity instances.</returns>
        public EntityQuery<ResourceLotTracking> GetResourceLotTrackingsQuery()
        {
            this.ValidateMethod("GetResourceLotTrackingsQuery", null);
            return base.CreateQuery<ResourceLotTracking>("GetResourceLotTrackings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceProperty"/> entity instances using the 'GetResourceProperties' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceProperty"/> entity instances.</returns>
        public EntityQuery<ResourceProperty> GetResourcePropertiesQuery()
        {
            this.ValidateMethod("GetResourcePropertiesQuery", null);
            return base.CreateQuery<ResourceProperty>("GetResourceProperties", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceType"/> entity instances using the 'GetResourceTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceType"/> entity instances.</returns>
        public EntityQuery<ResourceType> GetResourceTypesQuery()
        {
            this.ValidateMethod("GetResourceTypesQuery", null);
            return base.CreateQuery<ResourceType>("GetResourceTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ResourcesContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ResourcesService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IResourcesServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBillOfResources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetBillOfResourcesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetBillOfResources", ReplyAction="http://tempuri.org/ResourcesService/GetBillOfResourcesResponse")]
            [WebGet()]
            IAsyncResult BeginGetBillOfResources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBillOfResources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBillOfResources'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBillOfResources' operation.</returns>
            QueryResult<BillOfResource> EndGetBillOfResources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialClasses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetMaterialClassesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetMaterialClasses", ReplyAction="http://tempuri.org/ResourcesService/GetMaterialClassesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialClasses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialClasses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialClasses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialClasses' operation.</returns>
            QueryResult<ResourceClass> EndGetMaterialClasses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialDefinitions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetMaterialDefinitionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetMaterialDefinitions", ReplyAction="http://tempuri.org/ResourcesService/GetMaterialDefinitionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialDefinitions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialDefinitions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialDefinitions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialDefinitions' operation.</returns>
            QueryResult<ResourceDefinition> EndGetMaterialDefinitions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialDefinitionsForClass' operation.
            /// </summary>
            /// <param name="classID">The value for the 'classID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClassDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClass", ReplyAction="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClassResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialDefinitionsForClass(Nullable<int> classID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialDefinitionsForClass'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialDefinitionsForClass'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialDefinitionsForClass' operation.</returns>
            QueryResult<ResourceDefinition> EndGetMaterialDefinitionsForClass(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaterialDefinitionsForClassSearch' operation.
            /// </summary>
            /// <param name="classID">The value for the 'classID' parameter of this action.</param>
            /// <param name="keyword">The value for the 'keyword' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClassSearchDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClassSearch", ReplyAction="http://tempuri.org/ResourcesService/GetMaterialDefinitionsForClassSearchResponse")]
            [WebGet()]
            IAsyncResult BeginGetMaterialDefinitionsForClassSearch(Nullable<int> classID, string keyword, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaterialDefinitionsForClassSearch'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaterialDefinitionsForClassSearch'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMaterialDefinitionsForClassSearch' operation.</returns>
            QueryResult<ResourceDefinition> EndGetMaterialDefinitionsForClassSearch(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProperties' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetPropertiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetProperties", ReplyAction="http://tempuri.org/ResourcesService/GetPropertiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetProperties(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProperties'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProperties'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProperties' operation.</returns>
            QueryResult<Property> EndGetProperties(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceClasses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceClassesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceClasses", ReplyAction="http://tempuri.org/ResourcesService/GetResourceClassesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceClasses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceClasses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceClasses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceClasses' operation.</returns>
            QueryResult<ResourceClass> EndGetResourceClasses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceDefinitions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceDefinitionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceDefinitions", ReplyAction="http://tempuri.org/ResourcesService/GetResourceDefinitionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceDefinitions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceDefinitions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceDefinitions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceDefinitions' operation.</returns>
            QueryResult<ResourceDefinition> EndGetResourceDefinitions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceInventories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceInventoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceInventories", ReplyAction="http://tempuri.org/ResourcesService/GetResourceInventoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceInventories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceInventories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceInventories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceInventories' operation.</returns>
            QueryResult<ResourceInventory> EndGetResourceInventories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceLevels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceLevelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceLevels", ReplyAction="http://tempuri.org/ResourcesService/GetResourceLevelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceLevels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceLevels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceLevels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceLevels' operation.</returns>
            QueryResult<ResourceLevel> EndGetResourceLevels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceLots' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceLotsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceLots", ReplyAction="http://tempuri.org/ResourcesService/GetResourceLotsResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceLots(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceLots'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceLots'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceLots' operation.</returns>
            QueryResult<ResourceLot> EndGetResourceLots(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceLotStatuses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceLotStatusesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceLotStatuses", ReplyAction="http://tempuri.org/ResourcesService/GetResourceLotStatusesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceLotStatuses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceLotStatuses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceLotStatuses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceLotStatuses' operation.</returns>
            QueryResult<ResourceLotStatus> EndGetResourceLotStatuses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceLotTrackings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceLotTrackingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceLotTrackings", ReplyAction="http://tempuri.org/ResourcesService/GetResourceLotTrackingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceLotTrackings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceLotTrackings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceLotTrackings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceLotTrackings' operation.</returns>
            QueryResult<ResourceLotTracking> EndGetResourceLotTrackings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceProperties' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourcePropertiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceProperties", ReplyAction="http://tempuri.org/ResourcesService/GetResourcePropertiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceProperties(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceProperties'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceProperties'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceProperties' operation.</returns>
            QueryResult<ResourceProperty> EndGetResourceProperties(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/GetResourceTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/GetResourceTypes", ReplyAction="http://tempuri.org/ResourcesService/GetResourceTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceTypes' operation.</returns>
            QueryResult<ResourceType> EndGetResourceTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResourcesService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResourcesService/SubmitChanges", ReplyAction="http://tempuri.org/ResourcesService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ResourcesContextEntityContainer : EntityContainer
        {
            
            public ResourcesContextEntityContainer()
            {
                this.CreateEntitySet<BillOfResource>(EntitySetOperations.All);
                this.CreateEntitySet<Property>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceClass>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceDefinition>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceInventory>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceLevel>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceLot>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceLotStatus>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceLotTracking>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceProperty>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceType>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'SemiFinishedMaterialInventory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class SemiFinishedMaterialInventory : Entity
    {
        
        private int _count;
        
        private string _internalCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCountChanging(int value);
        partial void OnCountChanged();
        partial void OnInternalCodeChanging(string value);
        partial void OnInternalCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SemiFinishedMaterialInventory"/> class.
        /// </summary>
        public SemiFinishedMaterialInventory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Count' value.
        /// </summary>
        [DataMember()]
        public int Count
        {
            get
            {
                return this._count;
            }
            set
            {
                if ((this._count != value))
                {
                    this.OnCountChanging(value);
                    this.RaiseDataMemberChanging("Count");
                    this.ValidateProperty("Count", value);
                    this._count = value;
                    this.RaiseDataMemberChanged("Count");
                    this.OnCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCode' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(10)]
        public string InternalCode
        {
            get
            {
                return this._internalCode;
            }
            set
            {
                if ((this._internalCode != value))
                {
                    this.OnInternalCodeChanging(value);
                    this.ValidateProperty("InternalCode", value);
                    this._internalCode = value;
                    this.RaisePropertyChanged("InternalCode");
                    this.OnInternalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._internalCode;
        }
    }
    
    /// <summary>
    /// The 'Tyre' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class Tyre : MaterialDefinition
    {
        
        private Nullable<bool> _active;
        
        private string _cai;
        
        private string _dezen;
        
        private string _dimension;
        
        private Nullable<int> _internalCode;
        
        private string _internalCodeText;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnCAIChanging(string value);
        partial void OnCAIChanged();
        partial void OnDezenChanging(string value);
        partial void OnDezenChanged();
        partial void OnDimensionChanging(string value);
        partial void OnDimensionChanged();
        partial void OnInternalCodeChanging(Nullable<int> value);
        partial void OnInternalCodeChanged();
        partial void OnInternalCodeTextChanging(string value);
        partial void OnInternalCodeTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Tyre"/> class.
        /// </summary>
        public Tyre()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CAI' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string CAI
        {
            get
            {
                return this._cai;
            }
            set
            {
                if ((this._cai != value))
                {
                    this.OnCAIChanging(value);
                    this.RaiseDataMemberChanging("CAI");
                    this.ValidateProperty("CAI", value);
                    this._cai = value;
                    this.RaiseDataMemberChanged("CAI");
                    this.OnCAIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dezen' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dezen
        {
            get
            {
                return this._dezen;
            }
            set
            {
                if ((this._dezen != value))
                {
                    this.OnDezenChanging(value);
                    this.RaiseDataMemberChanging("Dezen");
                    this.ValidateProperty("Dezen", value);
                    this._dezen = value;
                    this.RaiseDataMemberChanged("Dezen");
                    this.OnDezenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Dimension' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Dimension
        {
            get
            {
                return this._dimension;
            }
            set
            {
                if ((this._dimension != value))
                {
                    this.OnDimensionChanging(value);
                    this.RaiseDataMemberChanging("Dimension");
                    this.ValidateProperty("Dimension", value);
                    this._dimension = value;
                    this.RaiseDataMemberChanged("Dimension");
                    this.OnDimensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> InternalCode
        {
            get
            {
                return this._internalCode;
            }
            set
            {
                if ((this._internalCode != value))
                {
                    this.OnInternalCodeChanging(value);
                    this.RaiseDataMemberChanging("InternalCode");
                    this.ValidateProperty("InternalCode", value);
                    this._internalCode = value;
                    this.RaiseDataMemberChanged("InternalCode");
                    this.OnInternalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalCodeText' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string InternalCodeText
        {
            get
            {
                return this._internalCodeText;
            }
            set
            {
                if ((this._internalCodeText != value))
                {
                    this.OnInternalCodeTextChanging(value);
                    this.RaiseDataMemberChanging("InternalCodeText");
                    this.ValidateProperty("InternalCodeText", value);
                    this._internalCodeText = value;
                    this.RaiseDataMemberChanged("InternalCodeText");
                    this.OnInternalCodeTextChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/T2T.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("T2T-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources))] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources))] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
